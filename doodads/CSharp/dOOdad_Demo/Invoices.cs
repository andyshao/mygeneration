/*
'===============================================================================
'  Generated From - CSharp_dOOdads_View.vbgen
'
'  The supporting base class SqlClientEntity is in the 
'  Architecture directory in "dOOdads".
'===============================================================================
*/

// Generated by MyGeneration Version # (1.0.0.4)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace dOOdad_Demo
{
	public class Invoices : SqlClientEntity
	{
		public Invoices()
		{
			this.QuerySource = "Invoices";
			this.MappingName = "Invoices";
		}	
	
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return base.Query.Load();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			base.FlushData();
		}
	
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ShipName
			{
				get
				{
					return new SqlParameter("@ShipName", SqlDbType.NVarChar, 40);
				}
			}
			
			public static SqlParameter ShipAddress
			{
				get
				{
					return new SqlParameter("@ShipAddress", SqlDbType.NVarChar, 60);
				}
			}
			
			public static SqlParameter ShipCity
			{
				get
				{
					return new SqlParameter("@ShipCity", SqlDbType.NVarChar, 15);
				}
			}
			
			public static SqlParameter ShipRegion
			{
				get
				{
					return new SqlParameter("@ShipRegion", SqlDbType.NVarChar, 15);
				}
			}
			
			public static SqlParameter ShipPostalCode
			{
				get
				{
					return new SqlParameter("@ShipPostalCode", SqlDbType.NVarChar, 10);
				}
			}
			
			public static SqlParameter ShipCountry
			{
				get
				{
					return new SqlParameter("@ShipCountry", SqlDbType.NVarChar, 15);
				}
			}
			
			public static SqlParameter CustomerID
			{
				get
				{
					return new SqlParameter("@CustomerID", SqlDbType.NChar, 5);
				}
			}
			
			public static SqlParameter CustomerName
			{
				get
				{
					return new SqlParameter("@CustomerName", SqlDbType.NVarChar, 40);
				}
			}
			
			public static SqlParameter Address
			{
				get
				{
					return new SqlParameter("@Address", SqlDbType.NVarChar, 60);
				}
			}
			
			public static SqlParameter City
			{
				get
				{
					return new SqlParameter("@City", SqlDbType.NVarChar, 15);
				}
			}
			
			public static SqlParameter Region
			{
				get
				{
					return new SqlParameter("@Region", SqlDbType.NVarChar, 15);
				}
			}
			
			public static SqlParameter PostalCode
			{
				get
				{
					return new SqlParameter("@PostalCode", SqlDbType.NVarChar, 10);
				}
			}
			
			public static SqlParameter Country
			{
				get
				{
					return new SqlParameter("@Country", SqlDbType.NVarChar, 15);
				}
			}
			
			public static SqlParameter Salesperson
			{
				get
				{
					return new SqlParameter("@Salesperson", SqlDbType.NVarChar, 31);
				}
			}
			
			public static SqlParameter OrderID
			{
				get
				{
					return new SqlParameter("@OrderID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter OrderDate
			{
				get
				{
					return new SqlParameter("@OrderDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter RequiredDate
			{
				get
				{
					return new SqlParameter("@RequiredDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ShippedDate
			{
				get
				{
					return new SqlParameter("@ShippedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ShipperName
			{
				get
				{
					return new SqlParameter("@ShipperName", SqlDbType.NVarChar, 40);
				}
			}
			
			public static SqlParameter ProductID
			{
				get
				{
					return new SqlParameter("@ProductID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter ProductName
			{
				get
				{
					return new SqlParameter("@ProductName", SqlDbType.NVarChar, 40);
				}
			}
			
			public static SqlParameter UnitPrice
			{
				get
				{
					return new SqlParameter("@UnitPrice", SqlDbType.Money, 0);
				}
			}
			
			public static SqlParameter Quantity
			{
				get
				{
					return new SqlParameter("@Quantity", SqlDbType.SmallInt, 0);
				}
			}
			
			public static SqlParameter Discount
			{
				get
				{
					return new SqlParameter("@Discount", SqlDbType.Real, 0);
				}
			}
			
			public static SqlParameter ExtendedPrice
			{
				get
				{
					return new SqlParameter("@ExtendedPrice", SqlDbType.Money, 0);
				}
			}
			
			public static SqlParameter Freight
			{
				get
				{
					return new SqlParameter("@Freight", SqlDbType.Money, 0);
				}
			}
			
		}
		#endregion	
	
		#region ColumnNames
		public class ColumnNames
		{  
			public const string ShipName = "ShipName";
			public const string ShipAddress = "ShipAddress";
			public const string ShipCity = "ShipCity";
			public const string ShipRegion = "ShipRegion";
			public const string ShipPostalCode = "ShipPostalCode";
			public const string ShipCountry = "ShipCountry";
			public const string CustomerID = "CustomerID";
			public const string CustomerName = "CustomerName";
			public const string Address = "Address";
			public const string City = "City";
			public const string Region = "Region";
			public const string PostalCode = "PostalCode";
			public const string Country = "Country";
			public const string Salesperson = "Salesperson";
			public const string OrderID = "OrderID";
			public const string OrderDate = "OrderDate";
			public const string RequiredDate = "RequiredDate";
			public const string ShippedDate = "ShippedDate";
			public const string ShipperName = "ShipperName";
			public const string ProductID = "ProductID";
			public const string ProductName = "ProductName";
			public const string UnitPrice = "UnitPrice";
			public const string Quantity = "Quantity";
			public const string Discount = "Discount";
			public const string ExtendedPrice = "ExtendedPrice";
			public const string Freight = "Freight";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ShipName] = Invoices.PropertyNames.ShipName;
					ht[ShipAddress] = Invoices.PropertyNames.ShipAddress;
					ht[ShipCity] = Invoices.PropertyNames.ShipCity;
					ht[ShipRegion] = Invoices.PropertyNames.ShipRegion;
					ht[ShipPostalCode] = Invoices.PropertyNames.ShipPostalCode;
					ht[ShipCountry] = Invoices.PropertyNames.ShipCountry;
					ht[CustomerID] = Invoices.PropertyNames.CustomerID;
					ht[CustomerName] = Invoices.PropertyNames.CustomerName;
					ht[Address] = Invoices.PropertyNames.Address;
					ht[City] = Invoices.PropertyNames.City;
					ht[Region] = Invoices.PropertyNames.Region;
					ht[PostalCode] = Invoices.PropertyNames.PostalCode;
					ht[Country] = Invoices.PropertyNames.Country;
					ht[Salesperson] = Invoices.PropertyNames.Salesperson;
					ht[OrderID] = Invoices.PropertyNames.OrderID;
					ht[OrderDate] = Invoices.PropertyNames.OrderDate;
					ht[RequiredDate] = Invoices.PropertyNames.RequiredDate;
					ht[ShippedDate] = Invoices.PropertyNames.ShippedDate;
					ht[ShipperName] = Invoices.PropertyNames.ShipperName;
					ht[ProductID] = Invoices.PropertyNames.ProductID;
					ht[ProductName] = Invoices.PropertyNames.ProductName;
					ht[UnitPrice] = Invoices.PropertyNames.UnitPrice;
					ht[Quantity] = Invoices.PropertyNames.Quantity;
					ht[Discount] = Invoices.PropertyNames.Discount;
					ht[ExtendedPrice] = Invoices.PropertyNames.ExtendedPrice;
					ht[Freight] = Invoices.PropertyNames.Freight;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
			public const string ShipName = "ShipName";
			public const string ShipAddress = "ShipAddress";
			public const string ShipCity = "ShipCity";
			public const string ShipRegion = "ShipRegion";
			public const string ShipPostalCode = "ShipPostalCode";
			public const string ShipCountry = "ShipCountry";
			public const string CustomerID = "CustomerID";
			public const string CustomerName = "CustomerName";
			public const string Address = "Address";
			public const string City = "City";
			public const string Region = "Region";
			public const string PostalCode = "PostalCode";
			public const string Country = "Country";
			public const string Salesperson = "Salesperson";
			public const string OrderID = "OrderID";
			public const string OrderDate = "OrderDate";
			public const string RequiredDate = "RequiredDate";
			public const string ShippedDate = "ShippedDate";
			public const string ShipperName = "ShipperName";
			public const string ProductID = "ProductID";
			public const string ProductName = "ProductName";
			public const string UnitPrice = "UnitPrice";
			public const string Quantity = "Quantity";
			public const string Discount = "Discount";
			public const string ExtendedPrice = "ExtendedPrice";
			public const string Freight = "Freight";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ShipName] = Invoices.ColumnNames.ShipName;
					ht[ShipAddress] = Invoices.ColumnNames.ShipAddress;
					ht[ShipCity] = Invoices.ColumnNames.ShipCity;
					ht[ShipRegion] = Invoices.ColumnNames.ShipRegion;
					ht[ShipPostalCode] = Invoices.ColumnNames.ShipPostalCode;
					ht[ShipCountry] = Invoices.ColumnNames.ShipCountry;
					ht[CustomerID] = Invoices.ColumnNames.CustomerID;
					ht[CustomerName] = Invoices.ColumnNames.CustomerName;
					ht[Address] = Invoices.ColumnNames.Address;
					ht[City] = Invoices.ColumnNames.City;
					ht[Region] = Invoices.ColumnNames.Region;
					ht[PostalCode] = Invoices.ColumnNames.PostalCode;
					ht[Country] = Invoices.ColumnNames.Country;
					ht[Salesperson] = Invoices.ColumnNames.Salesperson;
					ht[OrderID] = Invoices.ColumnNames.OrderID;
					ht[OrderDate] = Invoices.ColumnNames.OrderDate;
					ht[RequiredDate] = Invoices.ColumnNames.RequiredDate;
					ht[ShippedDate] = Invoices.ColumnNames.ShippedDate;
					ht[ShipperName] = Invoices.ColumnNames.ShipperName;
					ht[ProductID] = Invoices.ColumnNames.ProductID;
					ht[ProductName] = Invoices.ColumnNames.ProductName;
					ht[UnitPrice] = Invoices.ColumnNames.UnitPrice;
					ht[Quantity] = Invoices.ColumnNames.Quantity;
					ht[Discount] = Invoices.ColumnNames.Discount;
					ht[ExtendedPrice] = Invoices.ColumnNames.ExtendedPrice;
					ht[Freight] = Invoices.ColumnNames.Freight;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion

		#region StringPropertyNames
		public class StringPropertyNames
		{  
			public const string ShipName = "s_ShipName";
			public const string ShipAddress = "s_ShipAddress";
			public const string ShipCity = "s_ShipCity";
			public const string ShipRegion = "s_ShipRegion";
			public const string ShipPostalCode = "s_ShipPostalCode";
			public const string ShipCountry = "s_ShipCountry";
			public const string CustomerID = "s_CustomerID";
			public const string CustomerName = "s_CustomerName";
			public const string Address = "s_Address";
			public const string City = "s_City";
			public const string Region = "s_Region";
			public const string PostalCode = "s_PostalCode";
			public const string Country = "s_Country";
			public const string Salesperson = "s_Salesperson";
			public const string OrderID = "s_OrderID";
			public const string OrderDate = "s_OrderDate";
			public const string RequiredDate = "s_RequiredDate";
			public const string ShippedDate = "s_ShippedDate";
			public const string ShipperName = "s_ShipperName";
			public const string ProductID = "s_ProductID";
			public const string ProductName = "s_ProductName";
			public const string UnitPrice = "s_UnitPrice";
			public const string Quantity = "s_Quantity";
			public const string Discount = "s_Discount";
			public const string ExtendedPrice = "s_ExtendedPrice";
			public const string Freight = "s_Freight";

		}
		#endregion	
		
		#region Properties
		public virtual string ShipName
		{
			get
			{
				return base.Getstring(ColumnNames.ShipName);
			}
			set
			{
				base.Setstring(ColumnNames.ShipName, value);
			}
		}

		public virtual string ShipAddress
		{
			get
			{
				return base.Getstring(ColumnNames.ShipAddress);
			}
			set
			{
				base.Setstring(ColumnNames.ShipAddress, value);
			}
		}

		public virtual string ShipCity
		{
			get
			{
				return base.Getstring(ColumnNames.ShipCity);
			}
			set
			{
				base.Setstring(ColumnNames.ShipCity, value);
			}
		}

		public virtual string ShipRegion
		{
			get
			{
				return base.Getstring(ColumnNames.ShipRegion);
			}
			set
			{
				base.Setstring(ColumnNames.ShipRegion, value);
			}
		}

		public virtual string ShipPostalCode
		{
			get
			{
				return base.Getstring(ColumnNames.ShipPostalCode);
			}
			set
			{
				base.Setstring(ColumnNames.ShipPostalCode, value);
			}
		}

		public virtual string ShipCountry
		{
			get
			{
				return base.Getstring(ColumnNames.ShipCountry);
			}
			set
			{
				base.Setstring(ColumnNames.ShipCountry, value);
			}
		}

		public virtual string CustomerID
		{
			get
			{
				return base.Getstring(ColumnNames.CustomerID);
			}
			set
			{
				base.Setstring(ColumnNames.CustomerID, value);
			}
		}

		public virtual string CustomerName
		{
			get
			{
				return base.Getstring(ColumnNames.CustomerName);
			}
			set
			{
				base.Setstring(ColumnNames.CustomerName, value);
			}
		}

		public virtual string Address
		{
			get
			{
				return base.Getstring(ColumnNames.Address);
			}
			set
			{
				base.Setstring(ColumnNames.Address, value);
			}
		}

		public virtual string City
		{
			get
			{
				return base.Getstring(ColumnNames.City);
			}
			set
			{
				base.Setstring(ColumnNames.City, value);
			}
		}

		public virtual string Region
		{
			get
			{
				return base.Getstring(ColumnNames.Region);
			}
			set
			{
				base.Setstring(ColumnNames.Region, value);
			}
		}

		public virtual string PostalCode
		{
			get
			{
				return base.Getstring(ColumnNames.PostalCode);
			}
			set
			{
				base.Setstring(ColumnNames.PostalCode, value);
			}
		}

		public virtual string Country
		{
			get
			{
				return base.Getstring(ColumnNames.Country);
			}
			set
			{
				base.Setstring(ColumnNames.Country, value);
			}
		}

		public virtual string Salesperson
		{
			get
			{
				return base.Getstring(ColumnNames.Salesperson);
			}
			set
			{
				base.Setstring(ColumnNames.Salesperson, value);
			}
		}

		public virtual int OrderID
		{
			get
			{
				return base.Getint(ColumnNames.OrderID);
			}
			set
			{
				base.Setint(ColumnNames.OrderID, value);
			}
		}

		public virtual DateTime OrderDate
		{
			get
			{
				return base.GetDateTime(ColumnNames.OrderDate);
			}
			set
			{
				base.SetDateTime(ColumnNames.OrderDate, value);
			}
		}

		public virtual DateTime RequiredDate
		{
			get
			{
				return base.GetDateTime(ColumnNames.RequiredDate);
			}
			set
			{
				base.SetDateTime(ColumnNames.RequiredDate, value);
			}
		}

		public virtual DateTime ShippedDate
		{
			get
			{
				return base.GetDateTime(ColumnNames.ShippedDate);
			}
			set
			{
				base.SetDateTime(ColumnNames.ShippedDate, value);
			}
		}

		public virtual string ShipperName
		{
			get
			{
				return base.Getstring(ColumnNames.ShipperName);
			}
			set
			{
				base.Setstring(ColumnNames.ShipperName, value);
			}
		}

		public virtual int ProductID
		{
			get
			{
				return base.Getint(ColumnNames.ProductID);
			}
			set
			{
				base.Setint(ColumnNames.ProductID, value);
			}
		}

		public virtual string ProductName
		{
			get
			{
				return base.Getstring(ColumnNames.ProductName);
			}
			set
			{
				base.Setstring(ColumnNames.ProductName, value);
			}
		}

		public virtual decimal UnitPrice
		{
			get
			{
				return base.Getdecimal(ColumnNames.UnitPrice);
			}
			set
			{
				base.Setdecimal(ColumnNames.UnitPrice, value);
			}
		}

		public virtual short Quantity
		{
			get
			{
				return base.Getshort(ColumnNames.Quantity);
			}
			set
			{
				base.Setshort(ColumnNames.Quantity, value);
			}
		}

		public virtual float Discount
		{
			get
			{
				return base.Getfloat(ColumnNames.Discount);
			}
			set
			{
				base.Setfloat(ColumnNames.Discount, value);
			}
		}

		public virtual decimal ExtendedPrice
		{
			get
			{
				return base.Getdecimal(ColumnNames.ExtendedPrice);
			}
			set
			{
				base.Setdecimal(ColumnNames.ExtendedPrice, value);
			}
		}

		public virtual decimal Freight
		{
			get
			{
				return base.Getdecimal(ColumnNames.Freight);
			}
			set
			{
				base.Setdecimal(ColumnNames.Freight, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ShipName
		{
			get
			{
				return this.IsColumnNull(ColumnNames.ShipName) ? string.Empty : base.GetstringAsString(ColumnNames.ShipName);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ShipName);
				else
					this.ShipName = base.SetstringAsString(ColumnNames.ShipName, value);
			}
		}

		public virtual string s_ShipAddress
		{
			get
			{
				return this.IsColumnNull(ColumnNames.ShipAddress) ? string.Empty : base.GetstringAsString(ColumnNames.ShipAddress);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ShipAddress);
				else
					this.ShipAddress = base.SetstringAsString(ColumnNames.ShipAddress, value);
			}
		}

		public virtual string s_ShipCity
		{
			get
			{
				return this.IsColumnNull(ColumnNames.ShipCity) ? string.Empty : base.GetstringAsString(ColumnNames.ShipCity);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ShipCity);
				else
					this.ShipCity = base.SetstringAsString(ColumnNames.ShipCity, value);
			}
		}

		public virtual string s_ShipRegion
		{
			get
			{
				return this.IsColumnNull(ColumnNames.ShipRegion) ? string.Empty : base.GetstringAsString(ColumnNames.ShipRegion);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ShipRegion);
				else
					this.ShipRegion = base.SetstringAsString(ColumnNames.ShipRegion, value);
			}
		}

		public virtual string s_ShipPostalCode
		{
			get
			{
				return this.IsColumnNull(ColumnNames.ShipPostalCode) ? string.Empty : base.GetstringAsString(ColumnNames.ShipPostalCode);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ShipPostalCode);
				else
					this.ShipPostalCode = base.SetstringAsString(ColumnNames.ShipPostalCode, value);
			}
		}

		public virtual string s_ShipCountry
		{
			get
			{
				return this.IsColumnNull(ColumnNames.ShipCountry) ? string.Empty : base.GetstringAsString(ColumnNames.ShipCountry);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ShipCountry);
				else
					this.ShipCountry = base.SetstringAsString(ColumnNames.ShipCountry, value);
			}
		}

		public virtual string s_CustomerID
		{
			get
			{
				return this.IsColumnNull(ColumnNames.CustomerID) ? string.Empty : base.GetstringAsString(ColumnNames.CustomerID);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CustomerID);
				else
					this.CustomerID = base.SetstringAsString(ColumnNames.CustomerID, value);
			}
		}

		public virtual string s_CustomerName
		{
			get
			{
				return this.IsColumnNull(ColumnNames.CustomerName) ? string.Empty : base.GetstringAsString(ColumnNames.CustomerName);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CustomerName);
				else
					this.CustomerName = base.SetstringAsString(ColumnNames.CustomerName, value);
			}
		}

		public virtual string s_Address
		{
			get
			{
				return this.IsColumnNull(ColumnNames.Address) ? string.Empty : base.GetstringAsString(ColumnNames.Address);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Address);
				else
					this.Address = base.SetstringAsString(ColumnNames.Address, value);
			}
		}

		public virtual string s_City
		{
			get
			{
				return this.IsColumnNull(ColumnNames.City) ? string.Empty : base.GetstringAsString(ColumnNames.City);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.City);
				else
					this.City = base.SetstringAsString(ColumnNames.City, value);
			}
		}

		public virtual string s_Region
		{
			get
			{
				return this.IsColumnNull(ColumnNames.Region) ? string.Empty : base.GetstringAsString(ColumnNames.Region);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Region);
				else
					this.Region = base.SetstringAsString(ColumnNames.Region, value);
			}
		}

		public virtual string s_PostalCode
		{
			get
			{
				return this.IsColumnNull(ColumnNames.PostalCode) ? string.Empty : base.GetstringAsString(ColumnNames.PostalCode);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PostalCode);
				else
					this.PostalCode = base.SetstringAsString(ColumnNames.PostalCode, value);
			}
		}

		public virtual string s_Country
		{
			get
			{
				return this.IsColumnNull(ColumnNames.Country) ? string.Empty : base.GetstringAsString(ColumnNames.Country);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Country);
				else
					this.Country = base.SetstringAsString(ColumnNames.Country, value);
			}
		}

		public virtual string s_Salesperson
		{
			get
			{
				return this.IsColumnNull(ColumnNames.Salesperson) ? string.Empty : base.GetstringAsString(ColumnNames.Salesperson);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Salesperson);
				else
					this.Salesperson = base.SetstringAsString(ColumnNames.Salesperson, value);
			}
		}

		public virtual string s_OrderID
		{
			get
			{
				return this.IsColumnNull(ColumnNames.OrderID) ? string.Empty : base.GetintAsString(ColumnNames.OrderID);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OrderID);
				else
					this.OrderID = base.SetintAsString(ColumnNames.OrderID, value);
			}
		}

		public virtual string s_OrderDate
		{
			get
			{
				return this.IsColumnNull(ColumnNames.OrderDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.OrderDate);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.OrderDate);
				else
					this.OrderDate = base.SetDateTimeAsString(ColumnNames.OrderDate, value);
			}
		}

		public virtual string s_RequiredDate
		{
			get
			{
				return this.IsColumnNull(ColumnNames.RequiredDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.RequiredDate);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RequiredDate);
				else
					this.RequiredDate = base.SetDateTimeAsString(ColumnNames.RequiredDate, value);
			}
		}

		public virtual string s_ShippedDate
		{
			get
			{
				return this.IsColumnNull(ColumnNames.ShippedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ShippedDate);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ShippedDate);
				else
					this.ShippedDate = base.SetDateTimeAsString(ColumnNames.ShippedDate, value);
			}
		}

		public virtual string s_ShipperName
		{
			get
			{
				return this.IsColumnNull(ColumnNames.ShipperName) ? string.Empty : base.GetstringAsString(ColumnNames.ShipperName);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ShipperName);
				else
					this.ShipperName = base.SetstringAsString(ColumnNames.ShipperName, value);
			}
		}

		public virtual string s_ProductID
		{
			get
			{
				return this.IsColumnNull(ColumnNames.ProductID) ? string.Empty : base.GetintAsString(ColumnNames.ProductID);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ProductID);
				else
					this.ProductID = base.SetintAsString(ColumnNames.ProductID, value);
			}
		}

		public virtual string s_ProductName
		{
			get
			{
				return this.IsColumnNull(ColumnNames.ProductName) ? string.Empty : base.GetstringAsString(ColumnNames.ProductName);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ProductName);
				else
					this.ProductName = base.SetstringAsString(ColumnNames.ProductName, value);
			}
		}

		public virtual string s_UnitPrice
		{
			get
			{
				return this.IsColumnNull(ColumnNames.UnitPrice) ? string.Empty : base.GetdecimalAsString(ColumnNames.UnitPrice);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UnitPrice);
				else
					this.UnitPrice = base.SetdecimalAsString(ColumnNames.UnitPrice, value);
			}
		}

		public virtual string s_Quantity
		{
			get
			{
				return this.IsColumnNull(ColumnNames.Quantity) ? string.Empty : base.GetshortAsString(ColumnNames.Quantity);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Quantity);
				else
					this.Quantity = base.SetshortAsString(ColumnNames.Quantity, value);
			}
		}

		public virtual string s_Discount
		{
			get
			{
				return this.IsColumnNull(ColumnNames.Discount) ? string.Empty : base.GetfloatAsString(ColumnNames.Discount);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Discount);
				else
					this.Discount = base.SetfloatAsString(ColumnNames.Discount, value);
			}
		}

		public virtual string s_ExtendedPrice
		{
			get
			{
				return this.IsColumnNull(ColumnNames.ExtendedPrice) ? string.Empty : base.GetdecimalAsString(ColumnNames.ExtendedPrice);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ExtendedPrice);
				else
					this.ExtendedPrice = base.SetdecimalAsString(ColumnNames.ExtendedPrice, value);
			}
		}

		public virtual string s_Freight
		{
			get
			{
				return this.IsColumnNull(ColumnNames.Freight) ? string.Empty : base.GetdecimalAsString(ColumnNames.Freight);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Freight);
				else
					this.Freight = base.SetdecimalAsString(ColumnNames.Freight, value);
			}
		}


		#endregion			
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ShipName
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.ShipName, Parameters.ShipName);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter ShipAddress
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.ShipAddress, Parameters.ShipAddress);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter ShipCity
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.ShipCity, Parameters.ShipCity);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter ShipRegion
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.ShipRegion, Parameters.ShipRegion);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter ShipPostalCode
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.ShipPostalCode, Parameters.ShipPostalCode);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter ShipCountry
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.ShipCountry, Parameters.ShipCountry);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter CustomerID
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.CustomerID, Parameters.CustomerID);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter CustomerName
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.CustomerName, Parameters.CustomerName);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter Address
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.Address, Parameters.Address);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter City
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.City, Parameters.City);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter Region
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.Region, Parameters.Region);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter PostalCode
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.PostalCode, Parameters.PostalCode);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter Country
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.Country, Parameters.Country);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter Salesperson
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.Salesperson, Parameters.Salesperson);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter OrderID
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.OrderID, Parameters.OrderID);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter OrderDate
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.OrderDate, Parameters.OrderDate);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter RequiredDate
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.RequiredDate, Parameters.RequiredDate);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter ShippedDate
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.ShippedDate, Parameters.ShippedDate);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter ShipperName
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.ShipperName, Parameters.ShipperName);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter ProductID
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.ProductID, Parameters.ProductID);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter ProductName
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.ProductName, Parameters.ProductName);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter UnitPrice
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.UnitPrice, Parameters.UnitPrice);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter Quantity
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.Quantity, Parameters.Quantity);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter Discount
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.Discount, Parameters.Discount);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter ExtendedPrice
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.ExtendedPrice, Parameters.ExtendedPrice);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter Freight
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.Freight, Parameters.Freight);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ShipName
			{
				get
				{
					if(_ShipName_W == null)
					{
						_ShipName_W = TearOff.ShipName;
					}
					return _ShipName_W;
				}
			}

			public WhereParameter ShipAddress
			{
				get
				{
					if(_ShipAddress_W == null)
					{
						_ShipAddress_W = TearOff.ShipAddress;
					}
					return _ShipAddress_W;
				}
			}

			public WhereParameter ShipCity
			{
				get
				{
					if(_ShipCity_W == null)
					{
						_ShipCity_W = TearOff.ShipCity;
					}
					return _ShipCity_W;
				}
			}

			public WhereParameter ShipRegion
			{
				get
				{
					if(_ShipRegion_W == null)
					{
						_ShipRegion_W = TearOff.ShipRegion;
					}
					return _ShipRegion_W;
				}
			}

			public WhereParameter ShipPostalCode
			{
				get
				{
					if(_ShipPostalCode_W == null)
					{
						_ShipPostalCode_W = TearOff.ShipPostalCode;
					}
					return _ShipPostalCode_W;
				}
			}

			public WhereParameter ShipCountry
			{
				get
				{
					if(_ShipCountry_W == null)
					{
						_ShipCountry_W = TearOff.ShipCountry;
					}
					return _ShipCountry_W;
				}
			}

			public WhereParameter CustomerID
			{
				get
				{
					if(_CustomerID_W == null)
					{
						_CustomerID_W = TearOff.CustomerID;
					}
					return _CustomerID_W;
				}
			}

			public WhereParameter CustomerName
			{
				get
				{
					if(_CustomerName_W == null)
					{
						_CustomerName_W = TearOff.CustomerName;
					}
					return _CustomerName_W;
				}
			}

			public WhereParameter Address
			{
				get
				{
					if(_Address_W == null)
					{
						_Address_W = TearOff.Address;
					}
					return _Address_W;
				}
			}

			public WhereParameter City
			{
				get
				{
					if(_City_W == null)
					{
						_City_W = TearOff.City;
					}
					return _City_W;
				}
			}

			public WhereParameter Region
			{
				get
				{
					if(_Region_W == null)
					{
						_Region_W = TearOff.Region;
					}
					return _Region_W;
				}
			}

			public WhereParameter PostalCode
			{
				get
				{
					if(_PostalCode_W == null)
					{
						_PostalCode_W = TearOff.PostalCode;
					}
					return _PostalCode_W;
				}
			}

			public WhereParameter Country
			{
				get
				{
					if(_Country_W == null)
					{
						_Country_W = TearOff.Country;
					}
					return _Country_W;
				}
			}

			public WhereParameter Salesperson
			{
				get
				{
					if(_Salesperson_W == null)
					{
						_Salesperson_W = TearOff.Salesperson;
					}
					return _Salesperson_W;
				}
			}

			public WhereParameter OrderID
			{
				get
				{
					if(_OrderID_W == null)
					{
						_OrderID_W = TearOff.OrderID;
					}
					return _OrderID_W;
				}
			}

			public WhereParameter OrderDate
			{
				get
				{
					if(_OrderDate_W == null)
					{
						_OrderDate_W = TearOff.OrderDate;
					}
					return _OrderDate_W;
				}
			}

			public WhereParameter RequiredDate
			{
				get
				{
					if(_RequiredDate_W == null)
					{
						_RequiredDate_W = TearOff.RequiredDate;
					}
					return _RequiredDate_W;
				}
			}

			public WhereParameter ShippedDate
			{
				get
				{
					if(_ShippedDate_W == null)
					{
						_ShippedDate_W = TearOff.ShippedDate;
					}
					return _ShippedDate_W;
				}
			}

			public WhereParameter ShipperName
			{
				get
				{
					if(_ShipperName_W == null)
					{
						_ShipperName_W = TearOff.ShipperName;
					}
					return _ShipperName_W;
				}
			}

			public WhereParameter ProductID
			{
				get
				{
					if(_ProductID_W == null)
					{
						_ProductID_W = TearOff.ProductID;
					}
					return _ProductID_W;
				}
			}

			public WhereParameter ProductName
			{
				get
				{
					if(_ProductName_W == null)
					{
						_ProductName_W = TearOff.ProductName;
					}
					return _ProductName_W;
				}
			}

			public WhereParameter UnitPrice
			{
				get
				{
					if(_UnitPrice_W == null)
					{
						_UnitPrice_W = TearOff.UnitPrice;
					}
					return _UnitPrice_W;
				}
			}

			public WhereParameter Quantity
			{
				get
				{
					if(_Quantity_W == null)
					{
						_Quantity_W = TearOff.Quantity;
					}
					return _Quantity_W;
				}
			}

			public WhereParameter Discount
			{
				get
				{
					if(_Discount_W == null)
					{
						_Discount_W = TearOff.Discount;
					}
					return _Discount_W;
				}
			}

			public WhereParameter ExtendedPrice
			{
				get
				{
					if(_ExtendedPrice_W == null)
					{
						_ExtendedPrice_W = TearOff.ExtendedPrice;
					}
					return _ExtendedPrice_W;
				}
			}

			public WhereParameter Freight
			{
				get
				{
					if(_Freight_W == null)
					{
						_Freight_W = TearOff.Freight;
					}
					return _Freight_W;
				}
			}

			private WhereParameter _ShipName_W = null;
			private WhereParameter _ShipAddress_W = null;
			private WhereParameter _ShipCity_W = null;
			private WhereParameter _ShipRegion_W = null;
			private WhereParameter _ShipPostalCode_W = null;
			private WhereParameter _ShipCountry_W = null;
			private WhereParameter _CustomerID_W = null;
			private WhereParameter _CustomerName_W = null;
			private WhereParameter _Address_W = null;
			private WhereParameter _City_W = null;
			private WhereParameter _Region_W = null;
			private WhereParameter _PostalCode_W = null;
			private WhereParameter _Country_W = null;
			private WhereParameter _Salesperson_W = null;
			private WhereParameter _OrderID_W = null;
			private WhereParameter _OrderDate_W = null;
			private WhereParameter _RequiredDate_W = null;
			private WhereParameter _ShippedDate_W = null;
			private WhereParameter _ShipperName_W = null;
			private WhereParameter _ProductID_W = null;
			private WhereParameter _ProductName_W = null;
			private WhereParameter _UnitPrice_W = null;
			private WhereParameter _Quantity_W = null;
			private WhereParameter _Discount_W = null;
			private WhereParameter _ExtendedPrice_W = null;
			private WhereParameter _Freight_W = null;

			public void WhereClauseReset()
			{
				_ShipName_W = null;
				_ShipAddress_W = null;
				_ShipCity_W = null;
				_ShipRegion_W = null;
				_ShipPostalCode_W = null;
				_ShipCountry_W = null;
				_CustomerID_W = null;
				_CustomerName_W = null;
				_Address_W = null;
				_City_W = null;
				_Region_W = null;
				_PostalCode_W = null;
				_Country_W = null;
				_Salesperson_W = null;
				_OrderID_W = null;
				_OrderDate_W = null;
				_RequiredDate_W = null;
				_ShippedDate_W = null;
				_ShipperName_W = null;
				_ProductID_W = null;
				_ProductName_W = null;
				_UnitPrice_W = null;
				_Quantity_W = null;
				_Discount_W = null;
				_ExtendedPrice_W = null;
				_Freight_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
			return null;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			return null;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			return null;
		}
	}
}


