
//===============================================================================
//  Generated From - SQLite_CSharp_BusinessView.vbgen
//
//  The supporting base class SQLiteEntity is in the 
//  Architecture directory in "dOOdads".
//===============================================================================

// Generated by MyGeneration Version # (1.1.3.5)

using System;
using System.Data;
using Finisar.SQLite;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace MyGeneration.dOOdads.Tests.SQLite
{
	public abstract class _FullNameView : SQLiteEntity
	{
		public _FullNameView()
		{
			this.QuerySource = "FullNameView";
			this.MappingName = "FullNameView";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}

		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return this.Query.Load();
		}
	
		#region Parameters
		protected class Parameters
		{
			
			public static SQLiteParameter FullName
			{
				get
				{
					return new SQLiteParameter("@FullName", DbType.String);

				}
			}
			
			public static SQLiteParameter DepartmentID
			{
				get
				{
					return new SQLiteParameter("@DepartmentID", DbType.Int64);

				}
			}
			
			public static SQLiteParameter HireDate
			{
				get
				{
					return new SQLiteParameter("@HireDate", DbType.String);

				}
			}
			
			public static SQLiteParameter Salary
			{
				get
				{
					return new SQLiteParameter("@Salary", DbType.Int64);

				}
			}
			
			public static SQLiteParameter IsActive
			{
				get
				{
					return new SQLiteParameter("@IsActive", DbType.Int64);

				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string FullName = "FullName";
            public const string DepartmentID = "DepartmentID";
            public const string HireDate = "HireDate";
            public const string Salary = "Salary";
            public const string IsActive = "IsActive";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[FullName] = _FullNameView.PropertyNames.FullName;
					ht[DepartmentID] = _FullNameView.PropertyNames.DepartmentID;
					ht[HireDate] = _FullNameView.PropertyNames.HireDate;
					ht[Salary] = _FullNameView.PropertyNames.Salary;
					ht[IsActive] = _FullNameView.PropertyNames.IsActive;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string FullName = "FullName";
            public const string DepartmentID = "DepartmentID";
            public const string HireDate = "HireDate";
            public const string Salary = "Salary";
            public const string IsActive = "IsActive";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[FullName] = _FullNameView.ColumnNames.FullName;
					ht[DepartmentID] = _FullNameView.ColumnNames.DepartmentID;
					ht[HireDate] = _FullNameView.ColumnNames.HireDate;
					ht[Salary] = _FullNameView.ColumnNames.Salary;
					ht[IsActive] = _FullNameView.ColumnNames.IsActive;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string FullName = "s_FullName";
            public const string DepartmentID = "s_DepartmentID";
            public const string HireDate = "s_HireDate";
            public const string Salary = "s_Salary";
            public const string IsActive = "s_IsActive";

		}
		#endregion		
		
		#region Properties
	
		public virtual string FullName
	    {
			get
	        {
				return base.Getstring(ColumnNames.FullName);
			}
			set
	        {
				base.Setstring(ColumnNames.FullName, value);
			}
		}

		public virtual long DepartmentID
	    {
			get
	        {
				return base.Getlong(ColumnNames.DepartmentID);
			}
			set
	        {
				base.Setlong(ColumnNames.DepartmentID, value);
			}
		}

		public virtual string HireDate
	    {
			get
	        {
				return base.Getstring(ColumnNames.HireDate);
			}
			set
	        {
				base.Setstring(ColumnNames.HireDate, value);
			}
		}

		public virtual long Salary
	    {
			get
	        {
				return base.Getlong(ColumnNames.Salary);
			}
			set
	        {
				base.Setlong(ColumnNames.Salary, value);
			}
		}

		public virtual long IsActive
	    {
			get
	        {
				return base.Getlong(ColumnNames.IsActive);
			}
			set
	        {
				base.Setlong(ColumnNames.IsActive, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_FullName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FullName) ? string.Empty : base.GetstringAsString(ColumnNames.FullName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FullName);
				else
					this.FullName = base.SetstringAsString(ColumnNames.FullName, value);
			}
		}

		public virtual string s_DepartmentID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DepartmentID) ? string.Empty : base.GetlongAsString(ColumnNames.DepartmentID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DepartmentID);
				else
					this.DepartmentID = base.SetlongAsString(ColumnNames.DepartmentID, value);
			}
		}

		public virtual string s_HireDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.HireDate) ? string.Empty : base.GetstringAsString(ColumnNames.HireDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.HireDate);
				else
					this.HireDate = base.SetstringAsString(ColumnNames.HireDate, value);
			}
		}

		public virtual string s_Salary
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Salary) ? string.Empty : base.GetlongAsString(ColumnNames.Salary);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Salary);
				else
					this.Salary = base.SetlongAsString(ColumnNames.Salary, value);
			}
		}

		public virtual string s_IsActive
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsActive) ? string.Empty : base.GetlongAsString(ColumnNames.IsActive);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsActive);
				else
					this.IsActive = base.SetlongAsString(ColumnNames.IsActive, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter FullName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FullName, Parameters.FullName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DepartmentID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DepartmentID, Parameters.DepartmentID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter HireDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.HireDate, Parameters.HireDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Salary
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Salary, Parameters.Salary);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsActive
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsActive, Parameters.IsActive);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter FullName
		    {
				get
		        {
					if(_FullName_W == null)
	        	    {
						_FullName_W = TearOff.FullName;
					}
					return _FullName_W;
				}
			}

			public WhereParameter DepartmentID
		    {
				get
		        {
					if(_DepartmentID_W == null)
	        	    {
						_DepartmentID_W = TearOff.DepartmentID;
					}
					return _DepartmentID_W;
				}
			}

			public WhereParameter HireDate
		    {
				get
		        {
					if(_HireDate_W == null)
	        	    {
						_HireDate_W = TearOff.HireDate;
					}
					return _HireDate_W;
				}
			}

			public WhereParameter Salary
		    {
				get
		        {
					if(_Salary_W == null)
	        	    {
						_Salary_W = TearOff.Salary;
					}
					return _Salary_W;
				}
			}

			public WhereParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			private WhereParameter _FullName_W = null;
			private WhereParameter _DepartmentID_W = null;
			private WhereParameter _HireDate_W = null;
			private WhereParameter _Salary_W = null;
			private WhereParameter _IsActive_W = null;

			public void WhereClauseReset()
			{
				_FullName_W = null;
				_DepartmentID_W = null;
				_HireDate_W = null;
				_Salary_W = null;
				_IsActive_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
		
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter FullName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FullName, Parameters.FullName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DepartmentID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DepartmentID, Parameters.DepartmentID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter HireDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.HireDate, Parameters.HireDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Salary
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Salary, Parameters.Salary);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsActive
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsActive, Parameters.IsActive);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter FullName
		    {
				get
		        {
					if(_FullName_W == null)
	        	    {
						_FullName_W = TearOff.FullName;
					}
					return _FullName_W;
				}
			}

			public AggregateParameter DepartmentID
		    {
				get
		        {
					if(_DepartmentID_W == null)
	        	    {
						_DepartmentID_W = TearOff.DepartmentID;
					}
					return _DepartmentID_W;
				}
			}

			public AggregateParameter HireDate
		    {
				get
		        {
					if(_HireDate_W == null)
	        	    {
						_HireDate_W = TearOff.HireDate;
					}
					return _HireDate_W;
				}
			}

			public AggregateParameter Salary
		    {
				get
		        {
					if(_Salary_W == null)
	        	    {
						_Salary_W = TearOff.Salary;
					}
					return _Salary_W;
				}
			}

			public AggregateParameter IsActive
		    {
				get
		        {
					if(_IsActive_W == null)
	        	    {
						_IsActive_W = TearOff.IsActive;
					}
					return _IsActive_W;
				}
			}

			private AggregateParameter _FullName_W = null;
			private AggregateParameter _DepartmentID_W = null;
			private AggregateParameter _HireDate_W = null;
			private AggregateParameter _Salary_W = null;
			private AggregateParameter _IsActive_W = null;

			public void AggregateClauseReset()
			{
				_FullName_W = null;
				_DepartmentID_W = null;
				_HireDate_W = null;
				_Salary_W = null;
				_IsActive_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
			return null;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			return null;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			return null;
		}
	}
}
