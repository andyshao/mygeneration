using System;using System.IO;using System.Collections;namespace Zeus.MicrosoftScript{	/// <summary>	/// Summary description for DotNetScriptParser.	/// </summary>	public class MicrosoftScriptCodeParser : IZeusCodeParser	{		protected const string INCLUDE_FILE = "INCLUDE_FILE ";		protected const string INCLUDE_FILE_ALT = "FILE ";		protected const string INCLUDE_SCRIPT = "INCLUDE_SCRIPT ";		protected const string INCLUDE_SCRIPT_ALT = "SCRIPT ";		protected const string INCLUDE_TEMPLATE = "INCLUDE_TEMPLATE ";		protected const string INCLUDE_TEMPLATE_ALT = "TEMPLATE ";		protected const string WRITE = "output.write";		protected const string WRITELN = "output.writeln";		protected MicrosoftScriptEngine _engine;		protected string[,] _jsReplaceChars = new string[5, 2] { {"\\", "\\\\"}, {"\"", "\\\""}, {"\r", "\\r"}, {"\n", "\\n"}, {"\t", "\\t"} };		protected string[,] _vbReplaceChars = new string[4, 2] { {"\"", "\"\""}, {"\r\n", "\" & vbcrlf & \""}, {"\n", "\" & vbcrlf & \""}, {"\r", "\" & vbcrlf & \""} };		public MicrosoftScriptCodeParser(MicrosoftScriptEngine engine) 		{			_engine = engine;		}		private enum CustomTagType 		{			None = 0,			IncludeScript,			IncludeFile,			IncludeTemplate		}		public string ParseCustomTag(IZeusCodeSegment segment, string text)		{			string data = null, path = null;			string returnValue = string.Empty;			CustomTagType type = CustomTagType.None;						if (text.StartsWith(INCLUDE_SCRIPT))			{				data = text.Substring(INCLUDE_SCRIPT.Length).Trim();				type = CustomTagType.IncludeScript;			}			else if (text.StartsWith(INCLUDE_SCRIPT_ALT))			{				data = text.Substring(INCLUDE_SCRIPT_ALT.Length).Trim();				type = CustomTagType.IncludeScript;			}			else if (text.StartsWith(INCLUDE_TEMPLATE))			{				data = text.Substring(INCLUDE_TEMPLATE.Length).Trim();				type = CustomTagType.IncludeTemplate;			}			else if (text.StartsWith(INCLUDE_TEMPLATE_ALT))			{				data = text.Substring(INCLUDE_TEMPLATE_ALT.Length).Trim();				type = CustomTagType.IncludeTemplate;			}			else if (text.StartsWith(INCLUDE_FILE))			{				data = text.Substring(INCLUDE_FILE.Length).Trim();				type = CustomTagType.IncludeFile;			}			else if (text.StartsWith(INCLUDE_FILE_ALT))			{				data = text.Substring(INCLUDE_FILE_ALT.Length).Trim();				type = CustomTagType.IncludeFile;			}			switch (type) 			{				case CustomTagType.IncludeFile:					//TODO: Not yet implemented					break;				case CustomTagType.IncludeTemplate:					path = MicrosoftScriptEngine.MakeAbsolute(data, segment.ITemplate.FilePath);					returnValue = this.IncludeTemplate(segment.ITemplate, path);					break;				case CustomTagType.IncludeScript:					path = MicrosoftScriptEngine.MakeAbsolute(data, segment.ITemplate.FilePath);					returnValue = this.IncludeScript(path, false);					break;			}			return returnValue;		}		public string EscapeLiteral(string language, string text)		{			string[,] replaceChars;			string escapedString = text;			if (language == MicrosoftScriptEngine.VBSCRIPT)			{				replaceChars = this._vbReplaceChars;			}			else			{				replaceChars = this._jsReplaceChars;			}						for (int i = 0; i < (replaceChars.Length / 2); i++) 			{				escapedString = escapedString.Replace(replaceChars[i, 0], replaceChars[i, 1]);			}			return "\"" + escapedString + "\"";		}		public string BuildOutputCommand(string language, string text, bool isLiteral, bool addNewLine)		{			string cmd = (addNewLine ? WRITELN : WRITE);			if (language == MicrosoftScriptEngine.VBSCRIPT)			{				if (isLiteral) 				{					cmd += "(" + EscapeLiteral(language, text) + ")\r\n";				}				else 				{					cmd += "(" + text + ")\r\n";				}			}			else 			{				if (isLiteral) 				{					cmd += "(" + EscapeLiteral(language, text) + ");\r\n";				}				else 				{					cmd += "(" + text + ");\r\n";				}			}			return cmd;		}		public string GetCustomHeaderCode(IZeusCodeSegment segment, IZeusIntrinsicObject[] iobjs) { return string.Empty; }		public string GetCustomFooterCode(IZeusCodeSegment segment, IZeusIntrinsicObject[] iobjs) { return string.Empty; }		private string IncludeScript(string filename, bool isGui) 		{			string returnval = string.Empty;			if (File.Exists(filename)) 			{				StreamReader reader = File.OpenText(filename);				returnval = reader.ReadToEnd();				reader.Close();			}			else 			{				//TODO: Could throw an error here.			}			return returnval;		}		private string IncludeTemplate(IZeusTemplate template, string filename) 		{			string returnval = string.Empty;			if (File.Exists(filename)) 			{				IZeusTemplate includedTemplate = template.LoadTemplateFromFile(filename);				if ((includedTemplate.UniqueID != template.UniqueID) &&					(includedTemplate.BodySegment.Language != template.BodySegment.Language))				{					returnval = includedTemplate.BodySegment.Code;				}			}			else 			{				//TODO: Could throw an error here.			}			return returnval;		}	}}