#if !IGNORE_EFFIPROZ
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Data;
using MyMeta;

using System.Data.EffiProz;

namespace MyMeta.Plugins
{
    public class EffiProzPlugin : IMyMetaPlugin
	{
        //CREATE MEMORY TABLE PUBLIC.TEST_DATATYPES(FIELD_INTIDENTITY INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 33) NOT NULL,FIELD_INT INTEGER,FIELD_TINYINT TINYINT,FIELD_BOOLEAN BOOLEAN,FIELD_SMALLINT SMALLINT,FIELD_BIGINT BIGINT,FIELD_DOUBLE DOUBLE,FIELD_DATE DATE,FIELD_UNIQUEIDENTIFIER UNIQUEIDENTIFIER,FIELD_VARCHAR VARCHAR(50),FIELD_VARCHAR2 VARCHAR(50),FIELD_CHAR CHAR(1),FIELD_BINARY BINARY(50),FIELD_VARBINARY VARBINARY(50),FIELD_CLOB CLOB(4),FIELD_BLOB BLOB(4),FIELD_NUMBER DECIMAL(10,4),FIELD_DECIMAL DECIMAL(6,2),FIELD_TIMESTAMP TIMESTAMP(3),FIELD_TIMESTAMPWITHTZ TIMESTAMP(3) WITH TIME ZONE,FIELD_INTERVALYEAR INTERVAL YEAR(2) TO MONTH,FIELD_INTERVALDAY INTERVAL DAY(2) TO SECOND(3),CONSTRAINT PK_TEST_DATATYPES PRIMARY KEY(FIELD_INTIDENTITY))
        private const string PROVIDER_KEY = @"EFFIPROZ";
        private const string PROVIDER_NAME = @"EffiProz";
        private const string AUTHOR_INFO = @"EffiProz MyMeta plugin written by MyGeneration Software.";
		private const string AUTHOR_URI = @"http://www.mygenerationsoftware.com/";
        private const string SAMPLE_CONNECTION = @"Connection Type=File; Initial Catalog=App_Data/Efz/TestDB; User=sa; Password=;";

		private IMyMetaPluginContext context;

        void IMyMetaPlugin.Initialize(IMyMetaPluginContext context)
        {
            this.context = context;
        }

        string IMyMetaPlugin.ProviderName
        {
            get { return PROVIDER_NAME; }
        }

        string IMyMetaPlugin.ProviderUniqueKey
        {
            get { return PROVIDER_KEY; }
        }

        string IMyMetaPlugin.ProviderAuthorInfo
        {
            get { return AUTHOR_INFO; }
        }

        Uri IMyMetaPlugin.ProviderAuthorUri
        {
            get { return new Uri(AUTHOR_URI); }
        }

        bool IMyMetaPlugin.StripTrailingNulls
        {
            get { return false; }
        }

        bool IMyMetaPlugin.RequiredDatabaseName
        {
            get { return false; }
        }

        string IMyMetaPlugin.SampleConnectionString
        {
            get { return SAMPLE_CONNECTION; }
        }

        IDbConnection IMyMetaPlugin.NewConnection
        {
            get
            {
                if (IsIntialized)
				{
                    EfzConnection cn = new EfzConnection(this.context.ConnectionString);
					return cn as IDbConnection;
				}
                else
                    return null;
            }
        }

        string IMyMetaPlugin.DefaultDatabase
        {
            get
            {
				return this.GetDatabaseName();
            }
        }

        DataTable IMyMetaPlugin.Databases
        {
            get
            {
                DataTable metaData = new DataTable();
                try
                {
                    metaData = context.CreateDatabasesDataTable();

                    using (EfzConnection conn = new EfzConnection())
                    {
                        conn.ConnectionString = context.ConnectionString;
                        conn.Open();

                        EfzCommand cmd = new EfzCommand();
                        cmd.CommandText = "SELECT DISTINCT TABLE_CAT, TABLE_SCHEM FROM INFORMATION_SCHEMA.SYSTEM_TABLES WHERE TABLE_TYPE='TABLE'";
                        cmd.Connection = conn;

                        DataTable dt = new DataTable();
                        EfzDataAdapter adapter = new EfzDataAdapter();
                        adapter.SelectCommand = cmd;
                        adapter.Fill(dt);

                        foreach (DataRow r in dt.Rows)
                        {
                            DataRow row = metaData.NewRow();
                            metaData.Rows.Add(row);

                            row["CATALOG_NAME"] = r["TABLE_CAT"];
                            row["SCHEMA_NAME"] = r["TABLE_SCHEM"];
                            row["DESCRIPTION"] = conn.DataSource;
                        }
                    }
                }
                finally
                {

                }

                return metaData;
            }
        }

        DataTable IMyMetaPlugin.GetTables(string database)
        {
			DataTable metaData = new DataTable();
            /*SYSTEM_TABLES*/
			try
			{
				metaData = context.CreateTablesDataTable();

                using (EfzConnection conn = new EfzConnection())
                {
                    conn.ConnectionString = context.ConnectionString;
                    conn.Open();

                    EfzCommand cmd = new EfzCommand();
                    cmd.CommandText = "SELECT * FROM INFORMATION_SCHEMA.SYSTEM_TABLES WHERE TABLE_TYPE='TABLE' AND TABLE_CAT='" + database + "'";
                    cmd.Connection = conn;

                    DataTable dt = new DataTable();
                    EfzDataAdapter adapter = new EfzDataAdapter();
                    adapter.SelectCommand = cmd;
                    adapter.Fill(dt);

                    foreach (DataRow r in dt.Rows)
                    {
                        DataRow row = metaData.NewRow();
                        metaData.Rows.Add(row);

                        row["TABLE_CATALOG"] = r["TABLE_CAT"];
                        row["TABLE_SCHEMA"] = r["TABLE_SCHEM"];
                        row["TABLE_NAME"] = r["TABLE_NAME"];
                        row["TABLE_TYPE"] = r["TABLE_TYPE"] + " " + r["EFFIPROZ_TYPE"] + (r["COMMIT_ACTION"] == DBNull.Value ? string.Empty : (" " + r["COMMIT_ACTION"]));
                        row["DESCRIPTION"] = r["REMARKS"];

                    }
                }
			}
			finally
			{

			}

			return metaData;
        }

		DataTable IMyMetaPlugin.GetViews(string database)
        {
            DataTable metaData = new DataTable();

            try
            {
                metaData = context.CreateViewsDataTable();

                using (EfzConnection conn = new EfzConnection())
                {
                    conn.ConnectionString = context.ConnectionString;
                    conn.Open();

                    EfzCommand cmd = new EfzCommand();
                    cmd.CommandText =
@"SELECT t.TABLE_CAT, t.TABLE_SCHEM, v.TABLE_NAME, v.VIEW_DEFINITION, v.CHECK_OPTION, t.REMARKS, t.EFFIPROZ_TYPE, t.TABLE_TYPE, v.IS_UPDATABLE
FROM INFORMATION_SCHEMA.VIEWS v 
left join INFORMATION_SCHEMA.SYSTEM_TABLES t on t.TABLE_NAME = v.TABLE_NAME";
                    cmd.Connection = conn;

                    DataTable dt = new DataTable();
                    EfzDataAdapter adapter = new EfzDataAdapter();
                    adapter.SelectCommand = cmd;
                    adapter.Fill(dt);

                    foreach (DataRow r in dt.Rows)
                    {
                        DataRow row = metaData.NewRow();
                        metaData.Rows.Add(row);
                        row["TABLE_CATALOG"] = r["TABLE_CAT"];
                        row["TABLE_SCHEMA"] = r["TABLE_SCHEM"];
                        row["TABLE_NAME"] = r["TABLE_NAME"];
                        row["TABLE_TYPE"] = r["TABLE_TYPE"] + " " + r["EFFIPROZ_TYPE"] + (r["CHECK_OPTION"] == DBNull.Value ? string.Empty : (" " + r["CHECK_OPTION"]));
                        row["DESCRIPTION"] = r["REMARKS"];
                        row["IS_UPDATABLE"] = r["IS_UPDATABLE"].ToString().Equals("YES", StringComparison.CurrentCultureIgnoreCase);
                        //row["INSERTABLE_INTO"] = r["INSERTABLE_INTO"]; // NOT SUPPORTED YET
                        row["VIEW_TEXT"] = r["VIEW_DEFINITION"];

                    }
                }
            }
            finally
            {

            }

            return metaData;
		}

        DataTable IMyMetaPlugin.GetProcedures(string database)
        {
            return new DataTable();
        }

        DataTable IMyMetaPlugin.GetDomains(string database)
        {
            return new DataTable();
        }

        DataTable IMyMetaPlugin.GetProcedureParameters(string database, string procedure)
        {
            return new DataTable();
        }

        DataTable IMyMetaPlugin.GetProcedureResultColumns(string database, string procedure)
        {
            return new DataTable();
        }

        DataTable IMyMetaPlugin.GetViewColumns(string database, string view)
        {
            DataTable metaData = new DataTable();

            try
            {
                metaData = context.CreateColumnsDataTable();

                EfzConnection conn = new EfzConnection();
                conn.ConnectionString = context.ConnectionString;

                EfzCommand cmd = new EfzCommand();
                cmd.CommandText = "SELECT * FROM INFORMATION_SCHEMA.SYSTEM_COLUMNS WHERE TABLE_NAME='" + view + "' and TABLE_CAT='" + database + "'";
                cmd.Connection = conn;

                DataTable dt = new DataTable();
                EfzDataAdapter adapter = new EfzDataAdapter();
                adapter.SelectCommand = cmd;
                adapter.Fill(dt);

                foreach (DataRow r in dt.Rows)
                {
                    DataRow row = metaData.NewRow();
                    metaData.Rows.Add(row);

                    row["TABLE_CATALOG"] = r["TABLE_CAT"];
                    row["TABLE_SCHEMA"] = r["TABLE_SCHEM"];
                    row["TABLE_NAME"] = r["TABLE_NAME"];
                    row["COLUMN_NAME"] = r["COLUMN_NAME"];
                    row["ORDINAL_POSITION"] = r["ORDINAL_POSITION"];
                    row["DESCRIPTION"] = r["REMARKS"];
                    row["COLUMN_HASDEFAULT"] = false;

                    if (r["IS_NULLABLE"] != DBNull.Value)
                    {
                        row["IS_NULLABLE"] = r["IS_NULLABLE"];
                    }

                    if (r["COLUMN_DEF"] != DBNull.Value)
                    {
                        row["COLUMN_HASDEFAULT"] = true;
                        row["COLUMN_DEFAULT"] = r["COLUMN_DEF"];
                    }

                    /*if (r["AUTOINC_INCREMENT"] != DBNull.Value)
                    {
                        row["IS_AUTO_KEY"] = true;
                        row["AUTO_KEY_SEED"] = Convert.ToInt32(r["AUTOINC_SEED"]);
                        row["AUTO_KEY_INCREMENT"] = Convert.ToInt32(r["AUTOINC_INCREMENT"]);
                    }*/

                    int type = Convert.ToInt32(r["DATA_TYPE"]); // dbType enum code
                    string typeName = (string)r["TYPE_NAME"]; // dbType enum code
                    int charMax = 0;
                    int precision = 0;
                    int scale = 0;

                    if (r["COLUMN_SIZE"] != DBNull.Value)
                    {
                        charMax = Convert.ToInt32(r["COLUMN_SIZE"]);
                    }

                    if (r["COLUMN_SIZE"] != DBNull.Value)
                    {
                        precision = Convert.ToInt32(r["COLUMN_SIZE"]);
                    }

                    if (r["DECIMAL_DIGITS"] != DBNull.Value)
                    {
                        scale = Convert.ToInt32(r["DECIMAL_DIGITS"]);
                    }

                    row["DATA_TYPE"] = type;
                    row["TYPE_NAME"] = typeName;
                    row["TYPE_NAME_COMPLETE"] = this.GetDataTypeNameComplete(typeName, charMax, precision, scale);

                    row["NUMERIC_PRECISION"] = precision;
                    row["NUMERIC_SCALE"] = scale;

                    row["CHARACTER_MAXIMUM_LENGTH"] = charMax;

                    //TODO: we will have to find the best way to implement this later?
                    //row["IS_COMPUTED"] = (type == "timestamp") ? true : false;
                }
            }
            finally
            {

            }

            return metaData;
        }

        DataTable IMyMetaPlugin.GetTableColumns(string database, string table)
        {
            DataTable metaData = new DataTable();

            try
            {
                metaData = context.CreateColumnsDataTable();

                EfzConnection conn = new EfzConnection();
                conn.ConnectionString = context.ConnectionString;

                EfzCommand cmd = new EfzCommand();
                cmd.CommandText = "SELECT * FROM INFORMATION_SCHEMA.SYSTEM_COLUMNS WHERE TABLE_NAME='" + table + "' AND TABLE_CAT='" + database + "'";
                cmd.Connection = conn;

                DataTable dt = new DataTable();
                EfzDataAdapter adapter = new EfzDataAdapter();
                adapter.SelectCommand = cmd;
                adapter.Fill(dt);

                foreach (DataRow r in dt.Rows)
                {
                    DataRow row = metaData.NewRow();
                    metaData.Rows.Add(row);

                    row["TABLE_CATALOG"] = r["TABLE_CAT"];
                    row["TABLE_SCHEMA"] = r["TABLE_SCHEM"];
                    row["TABLE_NAME"] = r["TABLE_NAME"];
                    row["COLUMN_NAME"] = r["COLUMN_NAME"];
                    row["ORDINAL_POSITION"] = r["ORDINAL_POSITION"];
                    row["DESCRIPTION"] = r["REMARKS"];
                    row["COLUMN_HASDEFAULT"] = false;

                    if (r["IS_NULLABLE"] != DBNull.Value)
                    {
                        row["IS_NULLABLE"] = r["IS_NULLABLE"];
                    }

                    if (r["COLUMN_DEF"] != DBNull.Value)
                    {
                        row["COLUMN_HASDEFAULT"] = true;
                        row["COLUMN_DEFAULT"] = r["COLUMN_DEF"];
                    }

                    if (r["IS_GENERATED"] != DBNull.Value && r["IDENTITY_INCREMENT"] != DBNull.Value)
                    {
                        row["IS_AUTO_KEY"] = true;
                        row["AUTO_KEY_SEED"] = Convert.ToInt32(r["IDENTITY_START"]);
                        row["AUTO_KEY_INCREMENT"] = Convert.ToInt32(r["IDENTITY_INCREMENT"]);
                    }

                    int type = Convert.ToInt32(r["DATA_TYPE"]); // dbType enum code
                    string typeName = (string)r["TYPE_NAME"]; // dbType enum code
                    int charMax = 0;
                    int precision = 0;
                    int scale = 0;

                    if (r["COLUMN_SIZE"] != DBNull.Value)
                    {
                        charMax = Convert.ToInt32(r["COLUMN_SIZE"]);
                    }

                    if (r["COLUMN_SIZE"] != DBNull.Value)
                    {
                        precision = Convert.ToInt32(r["COLUMN_SIZE"]);
                    }

                    if (r["DECIMAL_DIGITS"] != DBNull.Value)
                    {
                        scale = Convert.ToInt32(r["DECIMAL_DIGITS"]);
                    }

                    row["DATA_TYPE"] = type;
                    row["TYPE_NAME"] = typeName;
                    row["TYPE_NAME_COMPLETE"] = this.GetDataTypeNameComplete(typeName, charMax, precision, scale);

                    row["NUMERIC_PRECISION"] = precision;
                    row["NUMERIC_SCALE"] = scale;

                    row["CHARACTER_MAXIMUM_LENGTH"] = charMax;

                    //TODO: we will have to find the best way to implement this later?
                    //row["IS_COMPUTED"] = (type == "timestamp") ? true : false;
                }
            }
            finally
            {

            }

            return metaData;
        }

        List<string> IMyMetaPlugin.GetPrimaryKeyColumns(string database, string table)
        {
			List<string> primaryKeys = new List<string>();

            try
            {
                /*EfzConnection conn = new EfzConnection();
                conn.ConnectionString = context.ConnectionString;

                EfzCommand cmd = new EfzCommand();

                cmd.CommandText =
"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.INDEXES where Table_Name='" + table + "' AND PRIMARY_KEY=1";
                cmd.Connection = conn;

                DataTable dt = new DataTable();
                EfzDataAdapter adapter = new EfzDataAdapter();
                adapter.SelectCommand = cmd;
                adapter.Fill(dt);

                foreach (DataRow row in dt.Rows)
                {
                    primaryKeys.Add((string)row["COLUMN_NAME"]);

                }*/
            }
            catch { }

			return primaryKeys;
        }

        List<string> IMyMetaPlugin.GetViewSubViews(string database, string view)
        {
            return new List<string>();
        }

        List<string> IMyMetaPlugin.GetViewSubTables(string database, string view)
        {
            return new List<string>();
        }

        DataTable IMyMetaPlugin.GetTableIndexes(string database, string table)
        {
			DataTable metaData = new DataTable();

            try
            {
                metaData = context.CreateIndexesDataTable();

                /*EfzConnection conn = new EfzConnection();
                conn.ConnectionString = context.ConnectionString;

                EfzCommand cmd = new EfzCommand();
                cmd.CommandText = "SELECT * FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME='" +
                    table + "'";
                cmd.Connection = conn;

                DataTable dt = new DataTable();
                EfzDataAdapter adapter = new EfzDataAdapter();
                adapter.SelectCommand = cmd;
                adapter.Fill(dt);

                foreach (DataRow r in dt.Rows)
                {
                    DataRow row = metaData.NewRow();
                    metaData.Rows.Add(row);

                    row["TABLE_NAME"] = r["TABLE_NAME"];
                    row["INDEX_NAME"] = r["INDEX_NAME"];
                    row["UNIQUE"] = r["UNIQUE"];
                    row["CLUSTERED"] = r["CLUSTERED"];
                    row["AUTO_UPDATE"] = r["AUTO_UPDATE"];
                    row["SORT_BOOKMARKS"] = r["SORT_BOOKMARKS"];
                    row["FILTER_CONDITION"] = r["FILTER_CONDITION"];
                    row["NULL_COLLATION"] = r["NULL_COLLATION"];
                    row["INITIAL_SIZE"] = r["INITIAL_SIZE"];
                    row["CARDINALITY"] = Convert.ToDecimal(r["INITIAL_SIZE"]);
                    row["COLLATION"] = r["COLLATION"];
                    row["COLUMN_NAME"] = r["COLUMN_NAME"];
                    row["FILL_FACTOR"] = r["FILL_FACTOR"];
                    row["AUTO_UPDATE"] = r["AUTO_UPDATE"];
                    row["PRIMARY_KEY"] = r["PRIMARY_KEY"];
                    row["NULLS"] = r["NULLS"];
                    row["ORDINAL_POSITION"] = r["ORDINAL_POSITION"];
                }*/
            }
            catch { }

			return metaData;
        }

        DataTable IMyMetaPlugin.GetForeignKeys(string database, string table)
        {
			DataTable metaData = new DataTable();

            try
            {
                metaData = context.CreateForeignKeysDataTable();

                //LoadForeignKeysPartOne(metaData, table);
                //LoadForeignKeysPartTwo(metaData, table);
            }
            catch { }

			return metaData;
        }

        /*private void LoadForeignKeysPartOne(DataTable metaData, string table)
        {
            EfzConnection conn = new EfzConnection();
            conn.ConnectionString = context.ConnectionString;

            EfzCommand cmd = new EfzCommand();
            cmd.CommandText =
"SELECT tc.*, rc.UPDATE_RULE, rc.DELETE_RULE, rc.UNIQUE_CONSTRAINT_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc " +
"JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS rc ON tc.CONSTRAINT_NAME = rc.CONSTRAINT_NAME " +
"WHERE tc.CONSTRAINT_TYPE='FOREIGN KEY' AND tc.TABLE_NAME = '" + table + "'";

            cmd.Connection = conn;

            DataTable dt = new DataTable();
            EfzDataAdapter adapter = new EfzDataAdapter();
            adapter.SelectCommand = cmd;
            adapter.Fill(dt);

            foreach (DataRow fk in dt.Rows)
            {
                //---------------------------------------
                // Get the Primary Key and Columns
                //---------------------------------------
                cmd = new EfzCommand();
                cmd.CommandText =
"SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE CONSTRAINT_NAME='" + fk["UNIQUE_CONSTRAINT_NAME"] + "'";
                cmd.Connection = conn;

                DataTable pCols = new DataTable();
                adapter = new EfzDataAdapter();
                adapter.SelectCommand = cmd;
                adapter.Fill(pCols);

                //---------------------------------------
                // Get the Foreign Key Columns
                //---------------------------------------
                cmd = new EfzCommand();
                cmd.CommandText =
"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE CONSTRAINT_NAME = '" + fk["CONSTRAINT_NAME"] + "'";
                cmd.Connection = conn;

                DataTable fCols = new DataTable();
                adapter = new EfzDataAdapter();
                adapter.SelectCommand = cmd;
                adapter.Fill(fCols);

                for (int i = 0; i < pCols.Rows.Count; i++)
                {
                    DataRow row = metaData.NewRow();
                    metaData.Rows.Add(row);

                    DataRow pRow = pCols.Rows[i];
                    DataRow fRow = fCols.Rows[i];

                    // The main Information ...
                    row["PK_TABLE_CATALOG"] = DBNull.Value;
                    row["PK_TABLE_SCHEMA"] = DBNull.Value;
                    row["FK_TABLE_CATALOG"] = DBNull.Value;
                    row["FK_TABLE_SCHEMA"] = DBNull.Value;
                    row["FK_TABLE_NAME"] = fk["TABLE_NAME"];
                    row["PK_TABLE_NAME"] = pRow["TABLE_NAME"];
                    row["ORDINAL"] = 0;
                    row["FK_NAME"] = fk["CONSTRAINT_NAME"];
                    row["UPDATE_RULE"] = fk["UPDATE_RULE"];
                    row["DELETE_RULE"] = fk["DELETE_RULE"];

                    bool isDeferrable = (bool)fk["IS_DEFERRABLE"];
                    bool initiallyDeferred = (bool)fk["INITIALLY_DEFERRED"];

                    if (isDeferrable)
                    {
                        row["DEFERRABILITY"] = initiallyDeferred ? 1 : 2;
                    }
                    else
                    {
                        row["DEFERRABILITY"] = 3;
                    }

                    row["PK_NAME"] = pRow["CONSTRAINT_NAME"];
                    row["PK_COLUMN_NAME"] = pRow["COLUMN_NAME"];
                    row["FK_COLUMN_NAME"] = fRow["COLUMN_NAME"];
                }
            }
        }

        private void LoadForeignKeysPartTwo(DataTable metaData, string table)
        {
            // Get primary key name
            EfzConnection conn = new EfzConnection();
            conn.ConnectionString = context.ConnectionString;

            EfzCommand cmd = new EfzCommand();
            cmd.CommandText = "SELECT INDEX_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME='" + table + "' AND PRIMARY_KEY=1";
            cmd.Connection = conn;

            string pkName = "";

            try
            {
                conn.Open();
                pkName = (string)cmd.ExecuteScalar();
            }
            finally
            {
                conn.Close();
            }

            // Got it
            
            conn = new EfzConnection();
            conn.ConnectionString = context.ConnectionString;

            cmd = new EfzCommand();
            cmd.CommandText =
"SELECT tc.*, rc.UPDATE_RULE, rc.DELETE_RULE, rc.UNIQUE_CONSTRAINT_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc " +
"JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS rc ON tc.CONSTRAINT_NAME = rc.CONSTRAINT_NAME " +
"WHERE tc.CONSTRAINT_TYPE='FOREIGN KEY' AND rc.UNIQUE_CONSTRAINT_NAME = '" + pkName + "'";

            cmd.Connection = conn;

            DataTable dt = new DataTable();
            EfzDataAdapter adapter = new EfzDataAdapter();
            adapter.SelectCommand = cmd;
            adapter.Fill(dt);

            foreach (DataRow fk in dt.Rows)
            {
                //---------------------------------------
                // Get the Primary Key and Columns
                //---------------------------------------
                cmd = new EfzCommand();
                cmd.CommandText =
"SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE CONSTRAINT_NAME='" + fk["UNIQUE_CONSTRAINT_NAME"] + "'";
                cmd.Connection = conn;

                DataTable pCols = new DataTable();
                adapter = new EfzDataAdapter();
                adapter.SelectCommand = cmd;
                adapter.Fill(pCols);

                //---------------------------------------
                // Get the Foreign Key Columns
                //---------------------------------------
                cmd = new EfzCommand();
                cmd.CommandText =
"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE CONSTRAINT_NAME = '" + fk["CONSTRAINT_NAME"] + "'";
                cmd.Connection = conn;

                DataTable fCols = new DataTable();
                adapter = new EfzDataAdapter();
                adapter.SelectCommand = cmd;
                adapter.Fill(fCols);

                for (int i = 0; i < pCols.Rows.Count; i++)
                {
                    DataRow row = metaData.NewRow();
                    metaData.Rows.Add(row);

                    DataRow pRow = pCols.Rows[i];
                    DataRow fRow = fCols.Rows[i];

                    // The main Information ...
                    row["PK_TABLE_CATALOG"] = DBNull.Value;
                    row["PK_TABLE_SCHEMA"] = DBNull.Value;
                    row["FK_TABLE_CATALOG"] = DBNull.Value;
                    row["FK_TABLE_SCHEMA"] = DBNull.Value;
                    row["FK_TABLE_NAME"] = fk["TABLE_NAME"];
                    row["PK_TABLE_NAME"] = pRow["TABLE_NAME"];
                    row["ORDINAL"] = 0;
                    row["FK_NAME"] = fk["CONSTRAINT_NAME"];
                    row["UPDATE_RULE"] = fk["UPDATE_RULE"];
                    row["DELETE_RULE"] = fk["DELETE_RULE"];

                    bool isDeferrable = (bool)fk["IS_DEFERRABLE"];
                    bool initiallyDeferred = (bool)fk["INITIALLY_DEFERRED"];

                    if (isDeferrable)
                    {
                        row["DEFERRABILITY"] = initiallyDeferred ? 1 : 2;
                    }
                    else
                    {
                        row["DEFERRABILITY"] = 3;
                    }

                    row["PK_NAME"] = pRow["CONSTRAINT_NAME"];
                    row["PK_COLUMN_NAME"] = pRow["COLUMN_NAME"];
                    row["FK_COLUMN_NAME"] = fRow["COLUMN_NAME"];
                }
            }
        }*/

        public object GetDatabaseSpecificMetaData(object myMetaObject, string key)
        {
            return null;
        }

		#region Internal Methods

        private bool IsIntialized 
		{ 
			get 
			{ 
				return (context != null); 
			} 
		}

		public string GetDatabaseName()
        {
            string db = "PUBLIC";
            try
            {
                using (EfzConnection conn = new EfzConnection())
                {
                    conn.ConnectionString = context.ConnectionString;
                    conn.Open();

                    EfzCommand cmd = new EfzCommand();
                    cmd.CommandText = "SELECT DISTINCT SCHEMA FROM INFORMATION_SCHEMA.SYSTEM_SESSIONS";
                    cmd.Connection = conn;
                    using (EfzDataReader reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            db = reader[0].ToString();
                            //break;
                        }
                        reader.Close();
                    }
                }
            }
            finally
            {

            }

            return db;
		}

		public string GetFullDatabaseName()
		{
            EfzConnection cn = new EfzConnection(this.context.ConnectionString);
            return cn.DataSource;
		}

		#endregion

        #region Other Methods

        private string GetDataTypeNameComplete(string dataType, int charMax, int precision, int scale)
        {
            // this.GetDataTypeNameComplete(type, charMax, precision, scale);
            //if (this.dbRoot.DomainOverride)
            //{
            //    if (this.HasDomain)
            //    {
            //        if (this.Domain != null)
            //        {
            //            return this.Domain.DataTypeNameComplete;
            //        }
            //    }
            //}

            StringBuilder sb = new StringBuilder();

            switch (dataType.ToUpper())
            {
                case "BOOLEAN":
                case "TINYINT":
                case "SMALLINT":
                case "INT":
                case "INTEGER":
                case "BIGINT":
                case "DOUBLE":
                case "DATE":
                case "UNIQUEIDENTIFIER":
                    sb.Append(dataType);
                    break;
                case "CHAR":
                case "VARCHAR":
                case "VARCHAR2":
                case "BINARY":
                case "VARBINARY":
                case "CLOB":
                case "BLOB":
                    sb.Append(dataType).Append('(').Append(charMax).Append(')');
                    break;
                case "NUMBER":
                case "DECIMAL":
                    sb.Append(dataType).Append('(').Append(precision).Append(", ").Append(scale).Append(')');
                    break;
                case "TIMESTAMP":
                    sb.Append(dataType);
                    if (precision > 0)
                    {
                        sb.Append('(').Append(precision).Append(')');
                    }
                    break;
                case "TIMESTAMP WITH TIME ZONE":
                    sb.Append("TIMESTAMP");
                    if (precision > 0)
                    {
                        sb.Append('(').Append(precision).Append(')');
                    }
                    sb.Append(" WITH TIME ZONE");
                    break;
                case "INTERVAL YEAR TO MONTH":
                    sb.Append("INTERVAL YEAR");
                    if (precision > 0)
                    {
                        sb.Append('(').Append(precision).Append(')');
                    }
                    sb.Append(" TO MONTH");
                    break;
                case "INTERVAL DAY TO SECOND":
                    sb.Append("INTERVAL DAY");
                    if (precision > 0)
                    {
                        sb.Append('(').Append(precision).Append(')');
                    }
                    sb.Append(" TO SECOND");
                    if (scale > 0)
                    {
                        sb.Append('(').Append(scale).Append(')');
                    }
                    break;
                default:
                    System.Diagnostics.Debugger.Break();
                    break;
            }
            return sb.ToString();
        }

        #endregion

    }
}
#endif
