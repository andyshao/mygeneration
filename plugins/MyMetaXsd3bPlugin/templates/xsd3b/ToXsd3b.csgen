##|TYPE Template
##|UNIQUEID 3c23532e-c7fb-4075-ad72-5e7aef9ed86f
##|TITLE ToXsd3b-xml (*.xsd3b)
##|NAMESPACE XML
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE XML
##|COMMENTS_BEGIN
Create *.xsd3b.xml for the xsd3b Provider. You can open the file with your html-browser or use it as Datasource for MyGeneration
##|COMMENTS_END
##|GUI_ENGINE .Net Script
##|GUI_LANGUAGE C#
##|GUI_BEGIN
<%#REFERENCE System.Windows.Forms.dll, Dl3bak.Xsd3b.dll, MyMeta.Plugins.Xsd3b.dll %>
<%#NAMESPACE System, System.Text, System.Collections, Zeus, Zeus.UserInterface, Zeus.DotNetScript, Dl3bak.Data.Xsd3b, MyMeta.Plugins.Xsd3b %>

public class GeneratedGui : DotNetScriptGui
{
	public GeneratedGui(ZeusGuiContext context) : base(context) {}

	public override void Setup()
	{
		if ( !input.Contains("lstTables") || !input.Contains("txtPath") )
		{
			ui.Title = "Export Databaseschema as xml (*.xsd3b)";
			ui.Width = 340;
			ui.Height = 600;
	
			// Grab default output path
			string sOutputPath = "";
			if (input.Contains("defaultOutputPath")) 
			{
				sOutputPath = input["defaultOutputPath"].ToString();
			}
	
			// Display and errors here
			GuiLabel lblError = ui.AddLabel("lblError", "", "");
			lblError.ForeColor = "Red";
	
			// Setup Folder selection input control.
			GuiLabel lblPath = ui.AddLabel("lblPath", "Select the output path:", "Select the output path in the field below.");
			GuiTextBox outpath = ui.AddTextBox("txtPath", sOutputPath, "Select the Output Path.");
			GuiFilePicker btnSelectPath = ui.AddFilePicker("btnPath", "Select Path", "Select the Output Path.", "txtPath", true);
	
			// Setup Database selection combobox.
			GuiLabel label_d = ui.AddLabel("lblDatabases", "Select a database:", "Select a database in the dropdown below.");
			GuiComboBox cmbDatabases = ui.AddComboBox("cmbDatabase", "Select a database.");
	
			// Setup Tables selection multi-select listbox.
			GuiLabel label_t = ui.AddLabel("lblTables", "Select tables:", "Select tables from the listbox below.");
			GuiListBox lstTables = ui.AddListBox("lstTables", "Select tables.");
			lstTables.Height = 80;
	
			// Setup Views selection multi-select listbox.
			GuiLabel label_v = ui.AddLabel("lblViews", "Select views:", "Select views from the listbox below.");
			GuiListBox lstViews = ui.AddListBox("lstViews", "Select views.");
			lstViews.Height = 80;
	
			// Setup Procedures selection multi-select listbox.
			GuiLabel label_p = ui.AddLabel("lblProcs", "Select procedures:", "Select procedures from the listbox below.");
			GuiListBox lstProcs = ui.AddListBox("lstProcs", "Select procedures.");
			lstProcs.Height = 80;
	
			// Attach the onchange event to the cmbDatabases control.
			setupDatabaseDropdown(cmbDatabases, lblError);
			cmbDatabases.AttachEvent("onchange", "cmbDatabases_onchange");
	
			ui.ShowGui = true;
		}
		else 
		{
			ui.ShowGui = false;
		}
	}
	
	public void setupDatabaseDropdown(GuiComboBox cmbDatabases, GuiLabel lblError)
	{
		try 
		{	
			if (MyMeta.IsConnected) 
			{
				cmbDatabases.BindData(MyMeta.Databases);
				if (MyMeta.DefaultDatabase != null) 
				{
					cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name;
					bindTables(cmbDatabases.SelectedValue);
					bindViews(cmbDatabases.SelectedValue);
					bindProcedures(cmbDatabases.SelectedValue);
				}
	
				lblError.Text = "";
			}
			else
			{
				lblError.Text = "Please set up your database connection in the Default Settings dialog.";
			}
		}
		catch (Exception ex)
		{
			lblError.Text = ex.Message;
		}
	}
	
	public void bindTables(string sDatabase)
	{
		GuiLabel lblError = ui["lblError"] as GuiLabel;
		int count = 0;
	
		GuiListBox lstTables = ui["lstTables"] as GuiListBox;
		
		try 
		{	
			IDatabase db = MyMeta.Databases[sDatabase];
			lstTables.BindData(db.Tables);
	
			lblError.Text = "";
		}
		catch (Exception ex)
		{
			lblError.Text = ex.Message;
		}
		selectAll(lstTables);
	}
	
	
	public void bindViews(string sDatabase)
	{
		GuiLabel lblError = ui["lblError"] as GuiLabel;
		int count = 0;
	
		GuiListBox lstViews = ui["lstViews"] as GuiListBox;
		
		try 
		{	
			IDatabase db = MyMeta.Databases[sDatabase];
			lstViews.BindData(db.Views);
	
			lblError.Text = "";
		}
		catch (Exception ex)
		{
			lblError.Text = ex.Message;
		}
		selectAll(lstViews);
	}
	
	public void bindProcedures(string sDatabase)
	{
		GuiLabel lblError = ui["lblError"] as GuiLabel;
		int count = 0;
	
		GuiListBox lstProcs = ui["lstProcs"] as GuiListBox;
		
		try 
		{	
			IDatabase db = MyMeta.Databases[sDatabase];
			lstProcs.BindData(db.Procedures);
	
			lblError.Text = "";
		}
		catch (Exception ex)
		{
			lblError.Text = ex.Message;
		}
		selectAll(lstProcs);
	}
	
	public void cmbDatabases_onchange(GuiComboBox control)
	{
		GuiLabel lblError = ui["lblError"] as GuiLabel;
		int count = 0;
	
		GuiComboBox cmbDatabases = ui["cmbDatabase"] as GuiComboBox;
	
		bindTables(cmbDatabases.SelectedText);
		bindViews(cmbDatabases.SelectedText);
		bindProcedures(cmbDatabases.SelectedText);
	}
	
	private void selectAll(GuiListBox control)
	{
		for(int i= 0; i < control.Count;i++)
			control.SelectAtIndex(i);

	}
}
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE .Net Script
##|BODY_LANGUAGE C#
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%#NAMESPACE System, System.IO, System.Text,System.Data , System.Collections, Zeus, Zeus.UserInterface, Zeus.DotNetScript, Dl3bak.Data.Xsd3b, MyMeta.Plugins.Xsd3b %><%#REFERENCE System.Windows.Forms.dll, System.Data.dll, System.Xml.dll, Dl3bak.Xsd3b.dll, MyMeta.Plugins.Xsd3b.dll %><%

/* -----------------------------------------------------------------------------
' ToXsd3b.csgen
' Last Update: 27.08.2007)
' Author: Klaus Evers (dl3bak)
'
' Exports the schema of the selected database to xml-file (*.xsd3b).
' Requires MyMeta.Plugins.Xsd3b.dll, Dl3bak.Xsd3b.dll,Dl3bak.Xsd3b.xsd.dll  in MyGeneration folder.
'
' Download from 
'
' v 0.1 (14.04.2007) - tables,views,relations,procedures
' V 0.3 (27.08.2007) - The Fileextension for the extended schema is now "*.xsd3b.xml". 
'		The XML includes <?xml-stylesheet type='text/xsl' href='xsd3b2htm.xsl'?>
'		xsd3b2htm.xsl is saved together with "*.xsd3b.xml" file allowing to read 
'			the "*.xsd3b.xml" file with your favorite html-browser
'
'----------------------------------------------------------------------------- */

public class GeneratedTemplate : DotNetScriptTemplate
{
	public GeneratedTemplate(ZeusTemplateContext context) : base(context) {}

	public override void Render()
	{
		string databaseName = input["cmbDatabase"].ToString(); 		
		ArrayList tables = input["lstTables"] as ArrayList;	
		ArrayList views = input["lstViews"] as ArrayList;	
		ArrayList procs = input["lstProcs"] as ArrayList;	
		IDatabase database = MyMeta.Databases[databaseName];


		Dnp.Utils.ProgressDialog pd = new Dnp.Utils.ProgressDialog();
		pd.Show();

		pd.ProgressBar.Minimum = 1;
		pd.ProgressBar.Maximum = tables.Count+views.Count+procs.Count+5;
		pd.ProgressBar.Value = 1;
		
		pd.Text = "Processing DatabaseInfos ...";
		pd.ProgressBar.Value += 1;
		// Filename info
		string filepath = input["txtPath"].ToString();
		if (!filepath.EndsWith("\\") ) filepath += "\\";
		
		// Build the filename
		string filename = filepath + "dbschema_" + databaseName + ".xsd3b.xml";
		
		output.setPreserveSource(filename, "<!--::", "::-->");

%>
<!-- 
	Generated with MyGeneration on  <%= DateTime.Now.ToString() %>
	Provider <%= MyMeta.DriverString %>  
	databaseName <%= databaseName %>
	Connectstring <%= MyMeta.ConnectionString %>	
-->
<%
        SchemaXsd3bEx xsd3b = SchemaXsd3bEx.CreateNewSchemaXsd3b();

		MyGen2Xsd3b.ImportDatabaseInfos(database, xsd3b);
		xsd3b.GetSchemaDefinitionRow().SchemaComment +=
@"
Generated with MyGeneration
Provider " + MyMeta.DriverString + @"
databaseName " + databaseName ;
		
		foreach(string tableName in tables)
		{
			ITable table = database.Tables[tableName];
			pd.Text = "Processing Table "+tableName+" ...";
			pd.ProgressBar.Value += 1;
			if (table != null)
				MyGen2Xsd3b.ImportTable(table,xsd3b.TableDefinition);
		}
		
		foreach (string viewName in views)
		{
			IView view = database.Views[viewName];
			pd.Text = "Processing View "+viewName+" ...";
			pd.ProgressBar.Value += 1;
			if (view != null)
				MyGen2Xsd3b.ImportView(view,xsd3b.TableDefinition);
		}
		
		foreach (string procName in procs)
		{
			IProcedure proc = database.Procedures[procName];
			pd.Text = "Processing Procedure "+procName+" ...";
			pd.ProgressBar.Value += 1;
			if (proc != null)
				MyGen2Xsd3b.ImportProc(proc,xsd3b.TableDefinition);
		}

		pd.Text = "Processing Relations/ForeignKeys ...";
		pd.ProgressBar.Value += 1;

		MyGen2Xsd3b.ImportRelations(database, xsd3b);
		
		pd.Close();
		output.writeln(xsd3b.GetXml());
		
		output.save(filename, "o");		
		WriteXslt(Path.GetDirectoryName(filename));
	}

	internal const string XSLT_FILENAME = "xsd3b2htm.xsl"; // xslt included with *.xsd3b.xml
	
	/// <summary>
	/// copy {dlldir}\[templates\xsd3b\]xsd3b2htm.xsl to {destDirectory}
	/// </summary>
	/// <param name="fileName"></param>
	private void WriteXslt(string destDirectory)
	{
	    string srcDir = Path.GetDirectoryName(typeof(SchemaXsd3bEx).Assembly.Location);
	    if (!File.Exists(Path.Combine(srcDir, XSLT_FILENAME)))
		srcDir = Path.Combine(srcDir, @"templates\xsd3b");
	    string srcFilename = Path.Combine(srcDir, XSLT_FILENAME);
	    string destFilename = Path.Combine(destDirectory, XSLT_FILENAME);
	    if ((File.Exists(srcFilename)) && (!File.Exists(destFilename)))
	    {
		File.Copy(srcFilename, destFilename);
	    }
	}
	

}
%>
##|BODY_END
