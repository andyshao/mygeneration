using System;using System.IO;using System.Text;using System.Collections;using Zeus.ErrorHandling;namespace Zeus.Legacy{	/// <summary>	/// Summary description for LegacyTemplateParser.	/// </summary>	public class LegacyTemplateParser	{		#region LegacyConstants		private const string TAG_START_PPD = "##|";		private const string PPD_UNIQUEID = "UNIQUEID";		private const string PPD_TITLE = "TITLE";		private const string PPD_GROUP = "GROUP";		private const string PPD_ENGINE = "ENGINE";		private const string PPD_LANGUAGE = "SCRIPT";		private const string PPD_OUTPUT_LANGUAGE = "OUTPUT";		private const string PPD_MODE = "MODE";		private const string PPD_START_TAG = "TAG_START";		private const string PPD_END_TAG = "TAG_END";		private const string PPD_COMMENTS_BEGIN = "COMMENTS_BEGIN";		private const string PPD_COMMENTS_END = "COMMENTS_END";		private const string PPD_INTERFACE_BEGIN = "INTERFACE_BEGIN";		private const string PPD_INTERFACE_END = "INTERFACE_END";		private const string PPD_BODY_BEGIN = "BODY_BEGIN";		private const string PPD_BODY_END = "BODY_END";		private const string PPD_INTERFACE_INCLUDE = "INTERFACE_INCLUDE";		private const string PPD_BODY_INCLUDE = "BODY_INCLUDE";		private const string PPD_TEMPLATE_INCLUDE = "TEMPLATE_INCLUDE";		private const string MODE_TEMPLATE_GROUP = "templategroup";		private const string MODE_PURE_SCRIPTING = "purescript";		private const string MODE_TAGGED_TEMPLATE = "taggedtemplate";		private const string DEFAULT_START_TAG = "<%";		private const string DEFAULT_END_TAG = "%>";		private const string LANGUAGE_VBSCRIPT = "VBScript";		private const string LANGUAGE_JSCRIPT = "JScript";		private const string LANGUAGE_NONE = "None";		private const string LANGUAGE_JAVA = "Java";		private const string LANGUAGE_CSHARP = "C#";		private const string LANGUAGE_VBNET = "VB.Net";		private const string LANGUAGE_VB = "Visual Basic";		private const string LANGUAGE_XML = "XML";		private const string LANGUAGE_HTML = "HTML";		private const string LANGUAGE_SQL = "SQL";		private const string LANGUAGE_TSQL = "Transact-SQL";		private const string LANGUAGE_PLSQL = "PL/SQL";		private const string LANGUAGE_JETSQL = "Jet SQL";		private const string LANGUAGE_PERL = "Perl";		private const string LANGUAGE_PHP = "PHP";		private const string ENGINE_DOT_NET_SCRIPT = ".Net Script";		private const string ENGINE_MICROSOFT_SCRIPT = "Microsoft Script";		private const string OLD_ENGINE_DOT_NET_SCRIPT = "DotNetScript";		private const string OLD_ENGINE_MICROSOFT_SCRIPT = "MicrosoftScript";		#endregion		public LegacyTemplateParser() {}		public void LoadIntoTemplate(string filePath, ZeusTemplate template) 		{			template.BodySegment.Engine = template.GuiSegment.Engine = ENGINE_MICROSOFT_SCRIPT;			template.BodySegment.Language = template.GuiSegment.Language = LANGUAGE_JSCRIPT;			StreamReader reader = new StreamReader(filePath, Encoding.UTF8);			LoadIntoTemplate(reader, filePath, template);			reader.Close();		}		protected ZeusTemplate LoadIntoTemplate(Stream stream, string filepath, ZeusTemplate template)		{			StreamReader reader = new StreamReader(stream, Encoding.UTF8);			LoadIntoTemplate(reader, filepath, template);			reader.Close();			return template;		}		protected void LoadIntoTemplate(StreamReader reader, string filepath, ZeusTemplate template)		{			char[] whitespace = new char[4] {'\n', '\r', '\t', ' '};			string key, val, line;			int tagLength = TAG_START_PPD.Length;			int x, y;			bool inGroupMode = false;			string startGroupTag = string.Empty;			StringBuilder builder = null;			if (filepath != null) 			{				int lastIndex = filepath.LastIndexOf('\\');				template.FileName = filepath.Substring(lastIndex + 1);				template.FilePath = filepath.Substring(0, lastIndex + 1);			}			line = reader.ReadLine();			while (line != null)			{				if (line.StartsWith(TAG_START_PPD)) 				{					x = line.IndexOfAny(whitespace);					if (x < 0) x = line.Length;					y = x - tagLength;									key = line.Substring(tagLength, y);					if (!inGroupMode) 					{						if (IsGroupStartTag(key)) 						{							inGroupMode = true;							startGroupTag = key;							builder = new StringBuilder();						}						else 						{							val = line.Substring(x).Trim();							AssignProperty(template, key, val);						}					}					else 					{						if (IsGroupEndTag(key)) 						{							AssignGroup(template, key, builder);							inGroupMode = false;							startGroupTag = string.Empty;						}						else						{							//TODO: *** Could put a warning here. Possibly have a warnings collection. Maybe a CompileInfo class?							builder.Append(line + "\r\n");						}					}				}				else if (inGroupMode)				{					builder.Append(line + "\r\n");				}				line = reader.ReadLine();			}		}		protected void AssignGroup(ZeusTemplate template, string key, StringBuilder builder) 		{			switch (key) 			{				case PPD_BODY_END:					template.BodySegment.CodeUnparsed = builder.ToString().TrimEnd();					break;				case PPD_COMMENTS_END:					template.Comments = builder.ToString().TrimEnd();					break;				case PPD_INTERFACE_END:					template.GuiSegment.CodeUnparsed = builder.ToString().TrimEnd();					break;			}		}		protected void AssignProperty(ZeusTemplate template, string key, string val) 		{			template.AddDirective(key, val);			switch (key.ToUpper()) 			{				case PPD_LANGUAGE:					template.BodySegment.Language = template.GuiSegment.Language = val;					break;				case PPD_MODE:					string tmp = val.ToLower();					if (tmp == MODE_TAGGED_TEMPLATE) 					{						template.Type = ZeusConstants.Types.TEMPLATE;						template.BodySegment.Mode = ZeusConstants.Modes.MARKUP;					}					else if (tmp == MODE_PURE_SCRIPTING) 					{						template.Type = ZeusConstants.Types.TEMPLATE;						template.BodySegment.Mode = ZeusConstants.Modes.PURE;					}					else if (tmp == MODE_TEMPLATE_GROUP) 					{						template.Type = ZeusConstants.Types.GROUP;						template.BodySegment.Mode = ZeusConstants.Modes.MARKUP;					}					else 					{						//TODO: *** Add custom error handling here!						throw new ZeusParseException(template, ZeusParseError.InvalidTemplateMode, "InvalidTemplateMode");					}					break;				case PPD_ENGINE: 					if (val == "MicrosoftScript") val = ZeusConstants.Engines.MICROSOFT_SCRIPT;					template.BodySegment.Engine = val;					template.GuiSegment.Engine = val;					break;				case PPD_OUTPUT_LANGUAGE:					template.OutputLanguage = val;					break;				case PPD_UNIQUEID:					template.UniqueID = val;					break;				case PPD_TITLE:					template.Title = val;					break;				case PPD_GROUP:					template.NamespacePathString = val;					break;				case PPD_START_TAG:					template.TagStart = val;					break;				case PPD_END_TAG:					template.TagEnd = val;					break;				case PPD_TEMPLATE_INCLUDE:					template.AddIncludedTemplatePath(val);					break;				/*case PPD_BODY_INCLUDE:					template.AddBodyIncludePath(val);					break;				case PPD_INTERFACE_INCLUDE:					template.AddInterfaceIncludePath(val);					break;*/			}		}				protected bool IsGroupStartTag(string key) 		{			switch (key) 			{				case PPD_BODY_BEGIN:				case PPD_COMMENTS_BEGIN:				case PPD_INTERFACE_BEGIN:					return true;			}			return false;		}		protected bool IsGroupEndTag(string key) 		{			switch (key) 			{				case PPD_BODY_END:				case PPD_COMMENTS_END:				case PPD_INTERFACE_END:					return true;			}			return false;		}	}}namespace Zeus.Templates{	internal class GarbageClass {}}namespace Zeus.Templates.DotNetScript{	internal class GarbageClass {}}namespace Zeus.ScriptModel{	internal class GarbageClass {}}