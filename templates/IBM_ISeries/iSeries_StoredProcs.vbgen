##|TYPE Template
##|UNIQUEID 417e7f23-fb8d-4b78-95ed-bc6527ca6e81
##|TITLE dOOdad Stored Procedures (iSeries)
##|NAMESPACE IBM ISeries
##|OUTPUT_LANGUAGE SQL
##|COMMENTS_BEGIN
Use this for iSeries dOOdads or other business entities. Select multiple tables and generate all your stored procedures 
in one click!
##|COMMENTS_END
##|GUI_ENGINE Microsoft Script
##|GUI_LANGUAGE VBScript
##|GUI_BEGIN
Dim cmbDatabases
Dim lstTables

Sub setup()

	Dim sOutputPath

	If Not input.Contains("lstTables") Or Not input.Contains("txtPath") Then
	
		If context.Objects.ContainsKey("DnpUtils") Then
			DnpUtils.ReadInputFromCache(context)
		End if	

		ui.Title = "iSeries Stored Procedures"
		ui.Width  = 330
		ui.Height = 510

		' Grab default output path
		sOutputPath = ""
		If input.Contains("defaultOutputPath") Then 
			sOutputPath = input.Item("defaultOutputPath")
		End If

		ui.AddLabel "lblPath", "Output file path: ",  "Select the output path."
		ui.AddTextBox "txtPath", sOutputPath, "Select the Output Path."
		ui.AddFilePicker "btnPath", "Select Path", "Select the Output Path.", "txtPath", true

		' List Databases in a ComboBox
		ui.AddLabel "lblDatabases", "Select a database:", "Select a database in the dropdown below."
		Set cmbDatabases = ui.AddComboBox("cmbDatabase", "Select a database.")

		' List Tables in a listbox
		ui.AddLabel "lblTables", "Select tables:", "Select tables from the listbox below."
		Set lstTables = ui.AddListBox ("lstTables", "Select tables:")
		lstTables.Height = 150

		' Attach the onchange event to the cmbDatabases control.
		setupDatabaseDropdown cmbDatabases
		cmbDatabases.AttachEvent "onchange", "cmbDatabases_onchange"

		' Add options
		ui.AddCheckBox "chkDrop", "DROP procedures before CREATE.", False, "Check this to DROP existing stored procedures."

		ui.ShowGUI = True
	Else 
		ui.ShowGUI = False
	End if

End Sub

Sub setupDatabaseDropdown(cmbDatabases)
	cmbDatabases.BindData MyMeta.Databases

	If Not MyMeta.DefaultDatabase Is Nothing Then
		cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name
		bindTables cmbDatabases.SelectedValue
	End If
End Sub

Sub bindTables(sDatabase)
	Set db = MyMeta.Databases(sDatabase)
	lstTables.BindData(db.Tables)
End Sub

' Event Handler
Sub cmbDatabases_onchange(control)
	Set cmbDatabases = ui.item("cmbDatabase")
	bindTables cmbDatabases.SelectedText
End Sub
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE Microsoft Script
##|BODY_LANGUAGE VBScript
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
'------------------------------------------------------------------------------
' iSeries_StoredProcs.vbgen
' Last Update : 3/19/2006
'
' Be sure to rename this template if you plan to customize it, MyGeneration 
' Software will update this template with new builds.
'------------------------------------------------------------------------------
'
'  This template generates 5 stored procedures
'
'  1) proc_[TableName]LoadByPrimaryKey
'  2) proc_[TableName]LoadAll
'  3) proc-[TableName]Update
'  4) proc_[TableName]Insert
'  5) proc_[TableName]Delete
'
'  There is script in the "Interface Code" tab that pops up a dialog so you can tell this tempate
'  where to save the files and what tables you want to generate stored procedures for.  So, the
'  logic at a very high level looks like this:
'
'   For Each TableName in Select Tables
'        objTable = database.Tables(TableName)
' 	
'	Generate the 5 stored procs
'
'   Save file
'======================================================================

If context.Objects.ContainsKey("DnpUtils") Then
	DnpUtils.SaveInputToCache(context)
End if

Dim objDatabase
Dim objTable
Dim objColumn
Dim intLp
Dim blnFirst
Dim strProcName
Dim blnHasComputed
Dim strWhereClause
Dim strWhereAnd
Dim strWhereFields
Dim strComma
Dim colTableNames
Dim strBuffer
Dim strDatabaseName 
Dim dropStatement
Dim strFilename
Dim strFilenameBase
Dim intLen
Dim intPos

strDatabaseName  = input.Item("cmbDatabase")
Set objDatabase = MyMeta.Databases(strDatabaseName)

Set colTableNames = input.Item("lstTables")

' Do we do ALTER or CREATE
dropStatement = input.Item("chkDrop")

' Save the output file for this Table
strFilenameBase = input.Item("txtPath")

intLen = Len(strFilenameBase)
intPos = InStrRev(strFilenameBase, "\") 

If Not intPos = intLen Then
	strFilenameBase = strFilenameBase & "\"
End If
%>SET SCHEMA = <%= strDatabaseName %>;

<%

' Loop through the tables the user select and generate the stored procs and save them to disk
For intLp = 0 To colTableNames.Count - 1

	Set objTable = objDatabase.Tables(colTableNames.item(intLp))
	
	If objTable.PrimaryKeys.Count = 0 Then
		output.write "-- ERROR: Table '" & objTable.Name & "' must have a primary key" & vbCrLf
		Exit For
	End If 

	'----------------------------------------------------------------------
	' LoadByPrimaryKey 
	'----------------------------------------------------------------------
	strProcName = "proc_" & objTable.Name & "LoadByPrimaryKey"	
%>--|****************| <%= objTable.Name %> LOAD BY KEY PROCEDURE |****************|
<%If dropStatement Then%>DROP PROCEDURE <%= strProcName %>;
<% End If %>
CREATE PROCEDURE <%= strProcName %>
(
<%
	' List all keys as parameters
	blnFirst = True
	For Each objColumn In objTable.PrimaryKeys
		If Not blnFirst Then 
			output.write  "," & vbCrLf
		End if	

		blnFirst = False	

		output.write "	IN " & GetParameterName(objColumn) & " " & objColumn.DataTypeNameComplete
	Next
%>
)
LANGUAGE SQL
READS SQL DATA
DYNAMIC RESULT SETS 1

BEGIN
	DECLARE temp_cursor CURSOR WITH HOLD WITH RETURN TO CLIENT
		FOR SELECT
<%
	' List all fields
	blnFirst = True
	For Each objColumn In objTable.Columns

		If Not blnFirst Then 
			output.write  "," & vbCrLf
		End if	

		blnFirst = False			

		output.write "		" & objColumn.Name & ""
	Next

	output.write vbCrLf
%>	FROM <%output.write objTable.Name %>
	WHERE
<%
	' Compare keys with parameters
	blnFirst = True
	For Each objColumn In objTable.PrimaryKeys

		If Not blnFirst Then 
			output.write  " AND" & vbCrLf
		End if	

		blnFirst = False					

		output.write "		(" & objColumn.Name & " = " & GetParameterName(objColumn) & ")"
	Next
%>;

	OPEN temp_cursor;
END;

<%
	
	'----------------------------------------------------------------------
	' LoadAll 
	'----------------------------------------------------------------------
	strProcName = "proc_" & objTable.Name & "LoadAll"		
%>--|****************| <%= objTable.Name %> LOAD ALL PROCEDURE |****************|
<%If dropStatement Then%>DROP PROCEDURE <%= strProcName %>;
<% End If %>
CREATE PROCEDURE <%= strProcName %>
LANGUAGE SQL
READS SQL DATA
DYNAMIC RESULT SETS 1

BEGIN
	DECLARE temp_cursor CURSOR WITH HOLD WITH RETURN TO CLIENT
		FOR SELECT
<%
	' List all fields
	blnFirst = True
	For Each objColumn In objTable.Columns
		If Not blnFirst Then 
			output.write  "," & vbCrLf
		End if

		blnFirst = False	

		output.write "		" & objColumn.Name & ""
	Next
%>
	FROM <%output.write objTable.Name %>;

	OPEN temp_cursor;
END;

<%
	
	'----------------------------------------------------------------------
	' Update
	'----------------------------------------------------------------------
	Dim colCount
	colCount = 0
	For Each objColumn In objTable.Columns
		If objColumn.IsInPrimaryKey Or objColumn.IsComputed Then
			colCount = ColCount + 1
		End If
	Next
	
	If (objTable.Columns.Count = colCount)  Then
		output.writeLn ""
		output.writeLn "-------------------------------------------"
		output.writeLn "-- NO UPDATE Stored Procedure Generated    "
		output.writeLn "-- All Columns are part of the Primary key "
		output.writeLn "-------------------------------------------"
		output.writeLn ""	
	Else
		strProcName = "proc_" & objTable.Name & "Update"			
%>--|****************| <%= objTable.Name %> UPDATE PROCEDURE |****************|
<%If dropStatement Then%>DROP PROCEDURE <%= strProcName %>;
<% End If %>
CREATE PROCEDURE <%= strProcName %>
(
<%
		' List all parameters
		blnFirst = True
		For Each objColumn In objTable.Columns
	
			If Not blnFirst Then 
				output.write  "," & vbCrLf
			End if
	
			blnFirst = False
	
			If objColumn.IsComputed Then
				output.write "	OUT "	
			Else
				output.write "	IN "						
			End If	
			
			output.write GetParameterName(objColumn) & " " & objColumn.DataTypeNameComplete
		Next
%>
)
LANGUAGE SQL
MODIFIES SQL DATA
DYNAMIC RESULT SETS 1

BEGIN
	UPDATE <%output.write objTable.Name %>
	SET
<%
		' List all fields
		blnFirst = True
		For Each objColumn In objTable.Columns
	
			If Not objColumn.IsInPrimaryKey And Not objColumn.IsAutoKey And Not objColumn.IsComputed Then
			   
				If Not blnFirst Then 
					output.write  "," & vbCrLf
				End if	
	
				blnFirst = False
	
				output.write "		" & objColumn.Name & " = " & GetParameterName(objColumn)
			End If	
		Next
	
		output.write vbCrLf		
%>	WHERE
<%
		' Compare keys with parameters
		blnFirst = True
		For Each objColumn In objTable.PrimaryKeys
			If Not blnFirst Then 
				output.write "	AND	" & objColumn.Name & " = " & GetParameterName(objColumn) & vbCrLf
			Else
				output.write "		" & objColumn.Name & " = " & GetParameterName(objColumn) & vbCrLf
			End if
			blnFirst = False
		Next
	End If	
%>;
END;

<%

	'----------------------------------------------------------------------
	' Insert
	'----------------------------------------------------------------------
	strProcName = "proc_" & objTable.Name & "Insert"
%>--|****************| <%= objTable.Name %> INSERT PROCEDURE |****************|
<%If dropStatement Then%>DROP PROCEDURE <%= strProcName %>;
<% End If %>
CREATE PROCEDURE <%= strProcName %>
(
<%
	' List all fields as parameters
	blnFirst = True
	For Each objColumn In objTable.Columns

		If Not blnFirst Then 
			output.write "," & vbCrLf
		End If 

		blnFirst = False

		If objColumn.IsComputed Then
			output.write "	OUT "	
		Else
			output.write "	IN "						
		End If	
		
		output.write GetParameterName(objColumn) & " " & objColumn.DataTypeNameComplete			
	Next
%>
)
LANGUAGE SQL
MODIFIES SQL DATA
DYNAMIC RESULT SETS 1

BEGIN
	INSERT INTO <%output.write objTable.Name %>
	(
<%
	' List all fields except identity (if one exists)
	blnFirst = True
	For Each objColumn In objTable.Columns

		' Check if field is not an indentity in which case we won't include it into insert list
		If Not objColumn.IsAutoKey And Not objColumn.IsComputed Then 			
			If Not blnFirst Then 
				output.write  "," & vbCrLf
			End if	

			blnFirst = False

			output.write "		" & objColumn.Name & "" 
		End If
	Next

	output.write vbCrLf 		
%>	)
	VALUES
	(
<%
	' List all parameters except the one for indetity (if one exists)
	blnFirst = True
	For Each objColumn In objTable.Columns

		' check if fields is not an identity
		If Not objColumn.IsAutoKey And Not objColumn.IsComputed Then 			
			If Not blnFirst Then 
				output.write  "," & vbCrLf
			End if	

			blnFirst = False

			output.write "		" & GetParameterName(objColumn)
		End If
	Next
%>
	);
END;

<%
	
	'----------------------------------------------------------------------
	' Delete
	'----------------------------------------------------------------------
	strProcName = "proc_" & objTable.Name & "Delete"		
%>--|****************| <%= objTable.Name %> DELETE PROCEDURE |****************|
<%If dropStatement Then%>DROP PROCEDURE <%= strProcName %>;
<% End If %>
CREATE PROCEDURE <%= strProcName %>
(
<%
	' List all keys as parameters
	blnFirst = True
	For Each objColumn In objTable.PrimaryKeys
		' check if at end of keys
		If Not blnFirst Then
			output.write "," & vbCrLf
		End If

		blnFirst = False

		output.write "	IN " & GetParameterName(objColumn) & " " & objColumn.DataTypeNameComplete
	Next
%>
)
LANGUAGE SQL
MODIFIES SQL DATA
DYNAMIC RESULT SETS 1

BEGIN
	DELETE
	FROM <%output.write objTable.Name %>
	WHERE
<%
	' Compare keys with parameters
	blnFirst = True
	For Each objColumn In objTable.PrimaryKeys

		' Continue where part with an AND
		If Not blnFirst Then
			output.write " AND" & vbCrLf
		End If

		blnFirst = False

		output.write "		" & objColumn.Name & " = " & GetParameterName(objColumn)
	Next
%>;
END;
<%

	' Save the output file for this Table
	strFilename = strFilenameBase & objTable.Name & ".sql"

	output.save strFilename, False
	strBuffer = strBuffer & output.text
	output.clear
Next

output.write strBuffer

filename = input.item("txtPath") 
lenth = Len(filename) 
pos = InStrRev(filename, "\") 

If Not pos = lenth Then 
  filename = filename & "\" 
End If 

filename = filename & "iSeriesAllProcedures.SQL" 
output.save filename, false 

' HELPER FUNCTIONS
Function GetParameterName(objColumn)
	Dim strName
	strName = "p_" & TrimSpaces(objColumn.Name)
	GetParameterName = strName
End Function

Function TrimSpaces(str)

	Dim tname
	Dim name
	Dim char
	Dim l

	name = ""
	tname = str
	l = Len(tname)

	For j = 1 To l
		char = Mid(tname, j, 1)
		If Not char = " " And Not Char = "." Then
			name = name & char
		End If
	Next

	TrimSpaces = name
End Function
%>
##|BODY_END
