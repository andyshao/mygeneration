##|TYPE Template
##|UNIQUEID 6FACF102-59DC-4335-8C20-50A90C51B728
##|TITLE C# AllDb Business Object
##|NAMESPACE ApexCalibur AllDb.C#
##|OUTPUT_LANGUAGE C#
##|GUI_ENGINE Microsoft Script
##|GUI_LANGUAGE VBScript
##|GUI_BEGIN
Dim cmbDatabases
Dim lstTables

Sub setup()

	If Not input.Contains("lstTables") Or Not input.Contains("txtPath") Then

		ui.Title = "Generate C# AllDb Business Objects"
		ui.Width  = 330
		ui.Height = 470

		' Grab default output path
		Dim sOutputPath
		sOutputPath = ""
		If input.Contains("defaultOutputPath") Then 
			sOutputPath = input.Item("defaultOutputPath")
		End If

		ui.AddLabel "lblPath", "Output file path: ",  "Select the output path."
		ui.AddTextBox "txtPath", sOutputPath, "Select the Output Path."
		ui.AddFilePicker "btnPath", "Select Path", "Select the Output Path.", "txtPath", true

		ui.AddLabel "lblNamespace", "Namespace: ",  "Provide your objects namespace."
		ui.AddTextBox "txtNamespace", "Your.Namespace", "Provide your objects namespace."

		' List Databases in a ComboBox
		ui.AddLabel "lblDatabases", "Select a database:", "Select a database in the dropdown below."
		Set cmbDatabases = ui.AddComboBox("cmbDatabase", "Select a database.")

		' List Tables in a listbox
		ui.AddLabel "lblTables", "Select tables:", "Select tables from the listbox below."
		Set lstTables = ui.AddListBox ("lstTables", "Select tables:")
		'lstTables.IsMultiSelect = false
		lstTables.Height = 120

		ui.AddLabel "lblLanguage", "Select a language:", "Select a Language for Column Mappings."
		Set cmbLanguages = ui.AddComboBox("cmbLanguages", "Select a Language.")
		cmbLanguages.Item("C#")              = "C#"
		cmbLanguages.Item("C# System Types") = "C# System Types"
		cmbLanguages.SelectedValue = "C#"

		' Attach the onchange event to the cmbDatabases control.
		setupDatabaseDropdown cmbDatabases
		cmbDatabases.AttachEvent "onchange", "cmbDatabases_onchange"
		
		ui.ShowGUI = true
	Else 
		ui.ShowGUI = false
	End if

End Sub

Sub setupDatabaseDropdown(cmbDatabases)
	cmbDatabases.BindData MyMeta.Databases

	If Not MyMeta.DefaultDatabase Is Nothing Then
		cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name
		bindTables cmbDatabases.SelectedValue
	End If
End Sub

Sub bindTables(sDatabase)
	Set db = MyMeta.Databases(sDatabase)
	lstTables.BindData(db.Tables)
End Sub

' Event Handler
Sub cmbDatabases_onchange(control)
	Set cmbDatabases = ui.item("cmbDatabase")
	bindTables cmbDatabases.SelectedText
End Sub
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE Microsoft Script
##|BODY_LANGUAGE VBScript
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
'------------------------------------------------------------------------------
' CSharp_AllDb_BusinessObject.vbgen
' Last Update : 2/23/2004
'
' See: http://www.apexcalibur.com/
'
' *** WARNING ***
' Be sure to rename this template if you plan to customize it, MyGeneration 
' Software will update this sample over time.
' *** WARNING ***
'------------------------------------------------------------------------------
Dim bFirst
Dim name
Dim pname
Dim objTable
Dim objColumn
Dim tableNames
Dim language
Dim databaseName
Dim database
Dim namespace

' Grab the namespace
namespace = input.Item("txtNamespace")

' Set the Language for our column data types
language = input.Item("cmbLanguages")
MyMeta.Language = language
MyMeta.DbTarget  = "AllDbClient"

' Grab the choices the user made in our UI Script (see Interface Code tab)
Set tableNames = input.Item("lstTables")

databaseName  = input.Item("cmbDatabase")
Set database = MyMeta.Databases(databaseName)

' Loop through the tables the user select and generate the stored procs and save them to disk
For intLp = 0 To tableNames.Count - 1

	Set objTable = database.Tables(tablenames.item(intLp))

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Now we have the table that we desire to build a Business Object From, let us begin.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%>
/*
===============================================================================
  ** IMPORTANT  ** 

  NOTE: Somewhere in your code you must define AllDbControl.DBType, for example

  AllDbControl.DBType = DatabaseType.Sql2000		' SQL 2000
  AllDbControl.DBType = DatabaseType.OleDb	  		' Access

  See http://www.apexcalibur.com/ for more information
  
  This object is 'abstract' which means you need to inherit from it to be able to instantiate it.  This is very
  easilly done. You can override properties and methods in your derived class, this allows you to regenerate
  this class at any time and not worry about overwriting custom code. (see below).

  Also, this object is not meant to be all consuming, without shipping an accompanying architecture this is a pretty good
  sample and can be used as is or taken and further customized, for instance, if you access a field that is dbNull an
  exception will be thrown, it would be better to return say "string.Empty".  Nonetheless, this object is fully function.

  ** IMPORTANT  ** 

	public class Employees : _Employees
	{
	
	}

  NOTE: Somewhere in your code you must define AllDbControl.DBType, for example
  AllDbControl.DBType = DatabaseType.Sql2000; 

 ============= Adding a Record =================

	Employees newObj = new Employees();
	newObj.ConnectionString =  @"SERVER=(local); DATABASE=Northwind; User ID=sa; PWD=";
	newObj.AddNew();
	
	// Your Properties will be different here
	newObj.FirstName = "Joe";
	newObj.LastName = "Plank Plank";
	
	newObj.Save();

 ============= Updating A Record  =================

	Employees obj = new Employees();
	obj.ConnectionString =  @"SERVER=(local); DATABASE=Northwind; User ID=sa; PWD=";
	
	if(obj.LoadByPrimaryKey(9))
	{
		// Your Properties will be different here
		obj.LastName = "Plank";
		obj.Save();
	}

 ============= Interating through Records  =================

	Employees obj = new Employees();
	obj.ConnectionString =  @"SERVER=(local); DATABASE=Northwind; User ID=sa; PWD=";
	if(obj.LoadAll())
	{
		obj.Rewind();
		while(obj.MoveNext())
		{
			// Your Properties will be different here
			Console.WriteLine(obj.FirstName);
		}
	}

===============================================================================
*/
using System;
using System.Data;
using System.Collections;

using ApexCalibur.Data.AllDbClient;

namespace <%= TrimSpaces(namespace) %>
{
	public abstract class <%= "_" & TrimSpaces(objTable.Name) %>
	{
		private DataTable dataTable = new DataTable();
		private DataRow currentRow = null;
		private IEnumerator enumerator = null;
	
		public string ConnectionString = "";
	
		public <%= "_" & TrimSpaces(objTable.Name) %>()
		{
	
		}
	
		/*
		'=================================================================
		'  public Overridable Sub AddNew()
		'=================================================================
		'  Adds a new record to our DataTable, if we haven't loaded any data yet the table has no
		'  structure, so, we do a little trick to get the column by doing a SELECT against the 
		'  table using "WHERE 1=0" which will bring back no data but our DataColumns and 
		'  other information are filled out for us.
		'=================================================================
		*/
		public virtual void AddNew()
		{
			if(dataTable.Rows.Count == 0)
			{
				AllDbCommand cmd = new AllDbCommand();
				cmd.Connection = new AllDbConnection(this.ConnectionString);
				cmd.CommandType = CommandType.Text;
				cmd.CommandText = <% output.write("""SELECT * FROM [" & objTable.Name & "] WHERE 1=0""")%>;
	
				AllDbDataAdapter dataAdapter = new AllDbDataAdapter();
				dataAdapter.SelectCommand = cmd;
				dataAdapter.Fill(dataTable);
			}
	
			currentRow = dataTable.NewRow();
			dataTable.Rows.Add(currentRow);
		}
	
		/*
		'=================================================================
		'  public virtual bool LoadAll()
		'=================================================================
		'  Loads all of the records in the database, and sets the currentRow to the first row
		'=================================================================
		*/
		public virtual bool LoadAll()
		{
			bool loaded = false;
	
			AllDbDataAdapter dataAdapter = new AllDbDataAdapter(<% output.write("""[proc_" & objTable.Name & "LoadAll]""")%>, this.ConnectionString);
			dataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;	
			dataAdapter.Fill(dataTable);
	
			if(dataTable.Rows.Count > 0)
			{
				currentRow = dataTable.Rows[0];
				loaded = true;
			}
	
			return loaded;
		}
	
		/*
		'=================================================================
		' public virtual bool LoadByPrimaryKey()
		'=================================================================
		'  Loads a single row of via the primary key
		'=================================================================
		*/
		public virtual bool LoadByPrimaryKey(<%
			bFirst = true
			For Each objColumn in objTable.PrimaryKeys
	
				If Not bFirst Then
					output.write ", "
				End If
	
				output.write objColumn.LanguageType & " " & GetAlias(objColumn)
	
				bFirst = false
			Next 
			output.write ")" & vbCrLf
			%>
		{
			bool loaded = false;
	
			AllDbCommand cmd = new AllDbCommand();
			cmd.Connection = new AllDbConnection(this.ConnectionString);
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = <% output.write("""[proc_" & objTable.Name & "LoadByPrimaryKey]""")%>; 
	
			<%
				If objTable.PrimaryKeys.Count > 0 Then
					output.write "AllDbParameter p;" & vbCrLf & vbCrLf
	
					For Each objColumn in objTable.PrimaryKeys
	
						name = GetAlias(objColumn)
	
						output.writeLn "			p = Parameters." & name & ";"
						output.writeLn "			p.Value = " & name & ";"
						output.writeLn "			cmd.Parameters.Add(p);"
	
					Next
				End If
			%>
			AllDbDataAdapter dataAdapter = new AllDbDataAdapter();
			dataAdapter.SelectCommand = cmd;
			dataAdapter.Fill(dataTable);
	
			if(dataTable.Rows.Count > 0)
			{
				currentRow = dataTable.Rows[0];
				loaded = true;
			}
	
			return loaded;
		}
	
		/*
		'=================================================================
		'  public Overridable Sub Save()
		'=================================================================
		'  Saves all changes, including Inserts, Deletes, and Updates. All Computed Columns and
		'  AutoKeys are updated and ready for access immediately after your call to Save()
		'=================================================================
		*/
		public virtual void Save()
		{
			bool inserts = false;
			bool updates = false;
			bool deletes = false;
	
			if(dataTable.Rows.Count > 0)
			{
				// Do we have any data to save
				foreach(DataRow row in dataTable.Rows)
				{
					switch(row.RowState)
					{
					  case DataRowState.Added:
						inserts = true;
						break;
					  case DataRowState.Modified:
						updates = true;
						break;
					  case DataRowState.Deleted:
						deletes = true;
						break;
					}
				}
			}
	
			AllDbDataAdapter dataAdapter = new AllDbDataAdapter();
			if(inserts)
			{
				dataAdapter.InsertCommand = this.CreateInsertCommand();
				dataAdapter.InsertCommand.Connection = new AllDbConnection(this.ConnectionString);
			}
	
			if(updates)
			{
				dataAdapter.UpdateCommand = this.CreateUpdateCommand();
				dataAdapter.UpdateCommand.Connection = new AllDbConnection(this.ConnectionString);
			}
	
			if(deletes)
			{
				dataAdapter.DeleteCommand = this.CreateDeleteCommand();
				dataAdapter.DeleteCommand.Connection = new AllDbConnection(this.ConnectionString);
			}
	
			dataAdapter.Update(dataTable);
		}
	
		/*
		'=================================================================
		'  public virtual void DeleteCurrentRow()
		'=================================================================
		'  NOTE: The most important thing to remember about this method is that it only marks
		'  the record for deletion, you must still call Save() to actually delete it.
		'=================================================================
		*/
		public virtual void DeleteCurrentRow()
		{
			if(currentRow != null)
			{
				currentRow.Delete();
			}
		}
	
		/*
		'=================================================================
		'  public Function RowState() As DataRowState
		'=================================================================
		'  This will return the actual DataRowState such as Added, Deleted, Modified
		'=================================================================
		*/
		public DataRowState RowState()
		{
			if(dataTable != null && currentRow != null)
			{
				return currentRow.RowState;
			}
			else
			{
				return DataRowState.Detached;
			}
		}
		
		/*
		'=================================================================
		'  public int RowCount()
		'=================================================================
		'  The number of rows in the object
		'=================================================================
		*/
		public int RowCount
		{
			get
			{
				int count = 0;
				if(dataTable != null)
				{
					count = dataTable.DefaultView.Count;
				}
				return count;
			}
		}
		
		/*
		'=================================================================
		'  public voic Rewind()
		'=================================================================
		'  This resets the iteraton, you should call this before you call MoveNext().
		'=================================================================
		*/
		public void Rewind()
		{
			currentRow = null;
			enumerator = null;
			
			if(dataTable != null)
			{
				if(dataTable.DefaultView.Count > 0)
				{
					enumerator = dataTable.DefaultView.GetEnumerator();
					enumerator.MoveNext();
					DataRowView rowView = enumerator.Current as DataRowView;
					currentRow = rowView.Row;
				}
			}
		}
		
		/*
		'=================================================================
		'  public bool MoveNext()
		'=================================================================
		'  This Moves the current row pointer to the next row and returns false if it has reached the
		'  end
		'=================================================================
		*/
		public bool MoveNext()
		{
			bool moved = false;
			
			if(enumerator != null && enumerator.MoveNext())
			{
				DataRowView rowView = enumerator.Current as DataRowView;
				currentRow = rowView.Row;
				moved = true;
			}
			
			return moved;
		}
	
		#region Parameters
		protected class Parameters
		{
			<% For Each objColumn in objTable.Columns 
			   pname = GetName(objColumn)
				name = GetAlias(objColumn)
			%>
			public static AllDbParameter <%= name %>
			{
				get
				{
					return new AllDbParameter("@<% output.write TrimSpaces(pname) & """, " & objColumn.DbTargetType
					if(objColumn.CharacterMaxLength > 0) Then
						output.write ", " & objColumn.CharacterMaxLength
					Else
						output.write ", 0"
					End If
					output.write ");" %>
				}
			}
			<% Next %>
		}
		#endregion
	
		#region ColumnNames
		public class ColumnNames
		{<% output.write vbCrLf
		   For Each objColumn in objTable.Columns
			   pname = GetName(objColumn)
				name = GetAlias(objColumn)
				output.write "			public const string " & name & " = """ & pname & """;" & vbCrLf 
			 Next %>
		}
		#endregion
	
	
		//=================================================================
		//  Properties Generated from the Table                        
		//=================================================================
		<%
		For Each objColumn in objTable.Columns
			name = GetAlias(objColumn)
		%>
		public virtual <%= objColumn.LanguageType %> <%= name %>
		{
			get
			{
				return (<%= objColumn.LanguageType %>)currentRow[ColumnNames.<%= name %>];
			}
			<% If Not objColumn.DataTypeName = "timestamp" And Not objColumn.IsComputed And Not objColumn.IsAutoKey Then %>
			set
			{
				currentRow[ColumnNames.<%= name %>] = value;
			}	<% End If %>
		}
		<%
		Next
		%>
	
		protected AllDbCommand CreateInsertCommand() 
		{
		<%
			strProcName = "[proc_" & objTable.Name & "Insert]"
		%>
			AllDbCommand cmd  = CreateParameters();
			cmd.CommandText = <%output.write """" & strProcName & """" %>;
	
		<% output.write vbCrLf
			If DriverSupportsOutputParamters(MyMeta.DriverString) Then
	
				'================================================================
				'  We're going to treat loop through and add the AllDbParameters to our AllDbCommand
				'================================================================
				For Each objColumn in objTable.Columns
					' AutoKeys and IsComputed Columns need to be returned, so we set them as output
					If objColumn.IsAutoKey Or objColumn.IsComputed Then
						name = GetName(objColumn)
						output.write "			cmd.Parameters[""@" & name & """].Direction = ParameterDirection.Output;" & vbCrLf
					End If
				Next
	
			End If
		%>
			return cmd;
		}
	
		protected AllDbCommand CreateUpdateCommand()
		{
		<%
			strProcName = "[proc_" & objTable.Name & "Update]"
		%>
			AllDbCommand cmd = CreateParameters();
			cmd.CommandText = <%output.write """" & strProcName & """" %>;
	
		<% output.write vbCrLf
			If DriverSupportsOutputParamters(MyMeta.DriverString) Then
	
				'================================================================
				'  We're going to treat loop through and add the AllDbParameters to our AllDbCommand
				'================================================================
				For Each objColumn in objTable.Columns
					' AutoKeys and IsComputed Columns need to be returned, so we set them as output
					If objColumn.IsComputed Then
						name = GetName(objColumn)
						output.write "			cmd.Parameters[""@" & name & """].Direction = ParameterDirection.Output;" & vbCrLf
					End If
				Next
	
			End If
		%>
			return cmd;
		}
	
		protected AllDbCommand CreateDeleteCommand()
		{
		<%
			strProcName = "[proc_" & objTable.Name & "Delete]"
		%>
			AllDbCommand cmd = new AllDbCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = <%output.write """" & strProcName & """" %>;
	
			AllDbParameter p;
		<% output.write vbCrLf
			'================================================================
			'  We're going to treat loop through and add the AllDbParameters to our AllDbCommand
			'================================================================
			For Each objColumn in objTable.Columns
	
				' AutoKeys and IsComputed Columns need to be returned, so we set them as output
				If objColumn.IsAutoKey Then
					name = GetAlias(objColumn)
					output.write "			p = cmd.Parameters.Add(Parameters." & name & ");" & vbCrLf
					output.write "			p.SourceColumn = """ & GetName(objColumn) & """;" & vbCrLf
					output.write "			p.SourceVersion = DataRowVersion.Current;" & vbCrLf & vbCrLf
				End If
	
			Next
		%>
			return cmd;
		}
	
		protected AllDbCommand CreateParameters()
		{
			AllDbParameter p;
	
			AllDbCommand cmd = new AllDbCommand();
			cmd.CommandType = CommandType.StoredProcedure;
	
			// Add params
		<% output.write vbCrLf
			'================================================================
			'  We're going to treat loop through and add the AllDbParameters to our AllDbCommand
			'================================================================
			For Each objColumn in objTable.Columns
	
				name = GetAlias(objColumn)
				output.write "			p = cmd.Parameters.Add(Parameters." & name & ");" & vbCrLf
				output.write "			p.SourceColumn = """ & GetName(objColumn) & """;" & vbCrLf
				output.write "			p.SourceVersion = DataRowVersion.Current;" & vbCrLf & vbCrLf
	
			Next
		%>
			return cmd;
		}
	}
}

<% 
	' Save the output file for this Table
	Dim filename
	filename = input.item("txtPath")

	Dim length
	Dim pos
	lenth = Len(filename)
	pos = InStrRev(filename, "\") 

	If Not pos = lenth Then
		filename = filename & "\"
	End If

	filename = filename & objTable.Alias & ".cs"

	output.save filename, false
	buffer = buffer & output.text
	output.clear
Next '  tableName
	
	output.write buffer
 %>

<% 
'===========================================================================
' These are support routines called by the above scirpt
'===========================================================================
Function GetAlias(objColumn)
	Dim name
	name = TrimSpaces(objColumn.Alias)
	GetAlias = UCase(Left(name, 1)) & Right(name, Len(name) -1)
End Function

Function GetName(objColumn)
	Dim name
	name = objColumn.Name
	GetName = UCase(Left(name, 1)) & Right(name, Len(name) -1)
End Function

Function TrimSpaces(str)

	Dim tname
	Dim name
	Dim char
	Dim l

	name = ""
	tname = str
	l = Len(tname)

	For j = 1 To l
		char = Mid(tname, j, 1)
		If Not char = " " Then
			name = name & char
		End If
	Next

	TrimSpaces = name
End Function

Function DriverSupportsOutputParamters(dbDriver)

	Dim Supports 
	Supports = True

	If dbDriver = "ACCESS" Then
			supports = False
	End If

	DriverSupportsOutputParamters = Supports

End Function

%>
##|BODY_END
