
'===============================================================================
'  Generated From - MySQL4_VBNet_BusinessEntity.vbgen
'
'  NEVER EDIT THIS FILE.
'
'  Public Class YourObject
'    Inherits _YourObject
'
'  End Class
'
'===============================================================================

' Generated by MyGeneration Version # (1.1.0.0)

Imports System
Imports System.Data
Imports MYSQL.Data.MySqlClient
Imports System.Collections
Imports System.Collections.Specialized

Imports MyGeneration.dOOdads

Namespace MYSQL4
    Public MustInherit Class _employee
        Inherits MySql4Entity

        Public Sub New()
            Me.QuerySource = "employee"
            Me.MappingName = "employee"
        End Sub

        '=================================================================
        '  Public Overrides Sub AddNew()
        '=================================================================
        '
        '=================================================================
        Public Overrides Sub AddNew()
            MyBase.AddNew()

        End Sub

        Public Overrides Sub FlushData()
            Me._whereClause = Nothing
            MyBase.FlushData()
        End Sub

        Public Overrides Function GetAutoKeyColumns() As String
            Return "EmployeeID"
        End Function

        '=================================================================
        '  	Public Function LoadAll() As Boolean
        '=================================================================
        '  Loads all of the records in the database, and sets the currentRow to the first row
        '=================================================================
        Public Function LoadAll() As Boolean

            Return Me.Query.Load()

        End Function


        '=================================================================
        ' Public Overridable Function LoadByPrimaryKey()  As Boolean
        '=================================================================
        '  Loads a single row of via the primary key
        '=================================================================
        Public Overridable Function LoadByPrimaryKey(ByVal EmployeeID As System.UInt32) As Boolean

            Me.Where.EmployeeID.Value = EmployeeID

            Return Me.Query.Load()

        End Function


#Region "Parameters"
        Protected Class Parameters

            Public Shared ReadOnly Property EmployeeID() As MySqlParameter
                Get
                    Return New MySqlParameter("?EmployeeID", MySqlDbType.Int32, 0)
                End Get
            End Property

            Public Shared ReadOnly Property FirstName() As MySqlParameter
                Get
                    Return New MySqlParameter("?FirstName", MySqlDbType.VarChar, 80)
                End Get
            End Property

            Public Shared ReadOnly Property LastName() As MySqlParameter
                Get
                    Return New MySqlParameter("?LastName", MySqlDbType.VarChar, 80)
                End Get
            End Property

            Public Shared ReadOnly Property TheInt1() As MySqlParameter
                Get
                    Return New MySqlParameter("?TheInt1", MySqlDbType.Int32, 0)
                End Get
            End Property

            Public Shared ReadOnly Property TheInt2() As MySqlParameter
                Get
                    Return New MySqlParameter("?TheInt2", MySqlDbType.Int32, 0)
                End Get
            End Property

        End Class
#End Region

#Region "ColumnNames"
        Public Class ColumnNames

            Public Const EmployeeID As String = "EmployeeID"
            Public Const FirstName As String = "FirstName"
            Public Const LastName As String = "LastName"
            Public Const TheInt1 As String = "TheInt1"
            Public Const TheInt2 As String = "TheInt2"

            Public Shared Function ToPropertyName(ByVal columnName As String) As String

                If ht Is Nothing Then

                    ht = New Hashtable

                    ht(EmployeeID) = _employee.PropertyNames.EmployeeID
                    ht(FirstName) = _employee.PropertyNames.FirstName
                    ht(LastName) = _employee.PropertyNames.LastName
                    ht(TheInt1) = _employee.PropertyNames.TheInt1
                    ht(TheInt2) = _employee.PropertyNames.TheInt2

                End If

                Return CType(ht(columnName), String)

            End Function

            Private Shared ht As Hashtable = Nothing
        End Class
#End Region

#Region "PropertyNames"
        Public Class PropertyNames

            Public Const EmployeeID As String = "EmployeeID"
            Public Const FirstName As String = "FirstName"
            Public Const LastName As String = "LastName"
            Public Const TheInt1 As String = "TheInt1"
            Public Const TheInt2 As String = "TheInt2"

            Public Shared Function ToColumnName(ByVal propertyName As String) As String

                If ht Is Nothing Then

                    ht = New Hashtable

                    ht(EmployeeID) = _employee.ColumnNames.EmployeeID
                    ht(FirstName) = _employee.ColumnNames.FirstName
                    ht(LastName) = _employee.ColumnNames.LastName
                    ht(TheInt1) = _employee.ColumnNames.TheInt1
                    ht(TheInt2) = _employee.ColumnNames.TheInt2

                End If

                Return CType(ht(propertyName), String)

            End Function

            Private Shared ht As Hashtable = Nothing

        End Class
#End Region

#Region "StringPropertyNames"
        Public Class StringPropertyNames

            Public Const EmployeeID As String = "s_EmployeeID"
            Public Const FirstName As String = "s_FirstName"
            Public Const LastName As String = "s_LastName"
            Public Const TheInt1 As String = "s_TheInt1"
            Public Const TheInt2 As String = "s_TheInt2"

        End Class
#End Region

#Region "Properties"
        Public Overridable Property EmployeeID() As System.UInt32
            Get
                Return MyBase.GetUInt32(ColumnNames.EmployeeID)
            End Get
            Set(ByVal Value As System.UInt32)
                MyBase.SetUInt32(ColumnNames.EmployeeID, Value)
            End Set
        End Property

        Public Overridable Property FirstName() As String
            Get
                Return MyBase.GetString(ColumnNames.FirstName)
            End Get
            Set(ByVal Value As String)
                MyBase.SetString(ColumnNames.FirstName, Value)
            End Set
        End Property

        Public Overridable Property LastName() As String
            Get
                Return MyBase.GetString(ColumnNames.LastName)
            End Get
            Set(ByVal Value As String)
                MyBase.SetString(ColumnNames.LastName, Value)
            End Set
        End Property

        Public Overridable Property TheInt1() As System.UInt32
            Get
                Return MyBase.GetUInt32(ColumnNames.TheInt1)
            End Get
            Set(ByVal Value As System.UInt32)
                MyBase.SetUInt32(ColumnNames.TheInt1, Value)
            End Set
        End Property

        Public Overridable Property TheInt2() As System.UInt32
            Get
                Return MyBase.GetUInt32(ColumnNames.TheInt2)
            End Get
            Set(ByVal Value As System.UInt32)
                MyBase.SetUInt32(ColumnNames.TheInt2, Value)
            End Set
        End Property


#End Region

#Region "String Properties"

        Public Overridable Property s_EmployeeID() As String
            Get
                If Me.IsColumnNull(ColumnNames.EmployeeID) Then
                    Return String.Empty
                Else
                    Return MyBase.GetUInt32AsString(ColumnNames.EmployeeID)
                End If
            End Get
            Set(ByVal Value As String)
                If String.Empty = Value Then
                    Me.SetColumnNull(ColumnNames.EmployeeID)
                Else
                    Me.EmployeeID = MyBase.SetUInt32AsString(ColumnNames.EmployeeID, Value)
                End If
            End Set
        End Property

        Public Overridable Property s_FirstName() As String
            Get
                If Me.IsColumnNull(ColumnNames.FirstName) Then
                    Return String.Empty
                Else
                    Return MyBase.GetStringAsString(ColumnNames.FirstName)
                End If
            End Get
            Set(ByVal Value As String)
                If String.Empty = Value Then
                    Me.SetColumnNull(ColumnNames.FirstName)
                Else
                    Me.FirstName = MyBase.SetStringAsString(ColumnNames.FirstName, Value)
                End If
            End Set
        End Property

        Public Overridable Property s_LastName() As String
            Get
                If Me.IsColumnNull(ColumnNames.LastName) Then
                    Return String.Empty
                Else
                    Return MyBase.GetStringAsString(ColumnNames.LastName)
                End If
            End Get
            Set(ByVal Value As String)
                If String.Empty = Value Then
                    Me.SetColumnNull(ColumnNames.LastName)
                Else
                    Me.LastName = MyBase.SetStringAsString(ColumnNames.LastName, Value)
                End If
            End Set
        End Property

        Public Overridable Property s_TheInt1() As String
            Get
                If Me.IsColumnNull(ColumnNames.TheInt1) Then
                    Return String.Empty
                Else
                    Return MyBase.GetUInt32AsString(ColumnNames.TheInt1)
                End If
            End Get
            Set(ByVal Value As String)
                If String.Empty = Value Then
                    Me.SetColumnNull(ColumnNames.TheInt1)
                Else
                    Me.TheInt1 = MyBase.SetUInt32AsString(ColumnNames.TheInt1, Value)
                End If
            End Set
        End Property

        Public Overridable Property s_TheInt2() As String
            Get
                If Me.IsColumnNull(ColumnNames.TheInt2) Then
                    Return String.Empty
                Else
                    Return MyBase.GetUInt32AsString(ColumnNames.TheInt2)
                End If
            End Get
            Set(ByVal Value As String)
                If String.Empty = Value Then
                    Me.SetColumnNull(ColumnNames.TheInt2)
                Else
                    Me.TheInt2 = MyBase.SetUInt32AsString(ColumnNames.TheInt2, Value)
                End If
            End Set
        End Property


#End Region

#Region "Where Clause"
        Public Class WhereClause

            Public Sub New(ByVal entity As BusinessEntity)
                Me._entity = entity
            End Sub

            Public ReadOnly Property TearOff() As TearOffWhereParameter
                Get
                    If _tearOff Is Nothing Then
                        _tearOff = New TearOffWhereParameter(Me)
                    End If

                    Return _tearOff
                End Get
            End Property

#Region "TearOff's"
            Public Class TearOffWhereParameter

                Public Sub New(ByVal clause As WhereClause)
                    Me._clause = clause
                End Sub


                Public ReadOnly Property EmployeeID() As WhereParameter
                    Get
                        Dim where As WhereParameter = New WhereParameter(ColumnNames.EmployeeID, Parameters.EmployeeID)
                        Me._clause._entity.Query.AddWhereParemeter(where)
                        Return where
                    End Get
                End Property

                Public ReadOnly Property FirstName() As WhereParameter
                    Get
                        Dim where As WhereParameter = New WhereParameter(ColumnNames.FirstName, Parameters.FirstName)
                        Me._clause._entity.Query.AddWhereParemeter(where)
                        Return where
                    End Get
                End Property

                Public ReadOnly Property LastName() As WhereParameter
                    Get
                        Dim where As WhereParameter = New WhereParameter(ColumnNames.LastName, Parameters.LastName)
                        Me._clause._entity.Query.AddWhereParemeter(where)
                        Return where
                    End Get
                End Property

                Public ReadOnly Property TheInt1() As WhereParameter
                    Get
                        Dim where As WhereParameter = New WhereParameter(ColumnNames.TheInt1, Parameters.TheInt1)
                        Me._clause._entity.Query.AddWhereParemeter(where)
                        Return where
                    End Get
                End Property

                Public ReadOnly Property TheInt2() As WhereParameter
                    Get
                        Dim where As WhereParameter = New WhereParameter(ColumnNames.TheInt2, Parameters.TheInt2)
                        Me._clause._entity.Query.AddWhereParemeter(where)
                        Return where
                    End Get
                End Property


                Private _clause As WhereClause
            End Class
#End Region

            Public ReadOnly Property EmployeeID() As WhereParameter
                Get
                    If _EmployeeID_W Is Nothing Then
                        _EmployeeID_W = TearOff.EmployeeID
                    End If
                    Return _EmployeeID_W
                End Get
            End Property

            Public ReadOnly Property FirstName() As WhereParameter
                Get
                    If _FirstName_W Is Nothing Then
                        _FirstName_W = TearOff.FirstName
                    End If
                    Return _FirstName_W
                End Get
            End Property

            Public ReadOnly Property LastName() As WhereParameter
                Get
                    If _LastName_W Is Nothing Then
                        _LastName_W = TearOff.LastName
                    End If
                    Return _LastName_W
                End Get
            End Property

            Public ReadOnly Property TheInt1() As WhereParameter
                Get
                    If _TheInt1_W Is Nothing Then
                        _TheInt1_W = TearOff.TheInt1
                    End If
                    Return _TheInt1_W
                End Get
            End Property

            Public ReadOnly Property TheInt2() As WhereParameter
                Get
                    If _TheInt2_W Is Nothing Then
                        _TheInt2_W = TearOff.TheInt2
                    End If
                    Return _TheInt2_W
                End Get
            End Property

            Private _EmployeeID_W As WhereParameter = Nothing
            Private _FirstName_W As WhereParameter = Nothing
            Private _LastName_W As WhereParameter = Nothing
            Private _TheInt1_W As WhereParameter = Nothing
            Private _TheInt2_W As WhereParameter = Nothing

            Public Sub WhereClauseReset()

                _EmployeeID_W = Nothing
                _FirstName_W = Nothing
                _LastName_W = Nothing
                _TheInt1_W = Nothing
                _TheInt2_W = Nothing
                Me._entity.Query.FlushWhereParameters()

            End Sub

            Private _entity As BusinessEntity
            Private _tearOff As TearOffWhereParameter
        End Class

        Public ReadOnly Property Where() As WhereClause
            Get
                If _whereClause Is Nothing Then
                    _whereClause = New WhereClause(Me)
                End If

                Return _whereClause
            End Get
        End Property

        Private _whereClause As WhereClause = Nothing
#End Region



        Protected Overrides Function GetInsertCommand() As IDbCommand

            Dim cmd As New MySqlCommand
            cmd.CommandType = CommandType.Text
            cmd.CommandText = "" & _
          "INSERT INTO `employee`" & _
          "(" & _
           "`FirstName`," & _
           "`LastName`," & _
           "`TheInt1`," & _
           "`TheInt2`" & _
          ")" & _
          "VALUES" & _
          "(" & _
           "?FirstName," & _
           "?LastName," & _
           "?TheInt1," & _
           "?TheInt2" & _
          ")"

            CreateParameters(cmd)
            Return cmd
        End Function

        Protected Overrides Function GetUpdateCommand() As IDbCommand

            Dim cmd As New MySqlCommand
            cmd.CommandType = CommandType.Text
            cmd.CommandText = "" & _
          "UPDATE `employee` SET " & _
           "`FirstName`=?FirstName," & _
           "`LastName`=?LastName," & _
           "`TheInt1`=?TheInt1," & _
           "`TheInt2`=?TheInt2" & _
          " WHERE " & _
           "`EmployeeID`=?EmployeeID"

            CreateParameters(cmd)
            Return cmd
        End Function

        Protected Overrides Function GetDeleteCommand() As IDbCommand

            Dim cmd As New MySqlCommand
            cmd.CommandType = CommandType.Text
            cmd.CommandText = "" & _
          "DELETE FROM `employee` " & _
          " WHERE " & _
           "`EmployeeID`=?EmployeeID"

            Dim p As MySqlParameter
            p = cmd.Parameters.Add(Parameters.EmployeeID)
            p.SourceColumn = ColumnNames.EmployeeID
            p.SourceVersion = DataRowVersion.Current


            Return cmd
        End Function

        Private Sub CreateParameters(ByVal cmd As MySqlCommand)

            Dim p As MySqlParameter
            p = cmd.Parameters.Add(Parameters.EmployeeID)
            p.SourceColumn = ColumnNames.EmployeeID
            p.SourceVersion = DataRowVersion.Current

            p = cmd.Parameters.Add(Parameters.FirstName)
            p.SourceColumn = ColumnNames.FirstName
            p.SourceVersion = DataRowVersion.Current

            p = cmd.Parameters.Add(Parameters.LastName)
            p.SourceColumn = ColumnNames.LastName
            p.SourceVersion = DataRowVersion.Current

            p = cmd.Parameters.Add(Parameters.TheInt1)
            p.SourceColumn = ColumnNames.TheInt1
            p.SourceVersion = DataRowVersion.Current

            p = cmd.Parameters.Add(Parameters.TheInt2)
            p.SourceColumn = ColumnNames.TheInt2
            p.SourceVersion = DataRowVersion.Current


        End Sub



    End Class

End Namespace
