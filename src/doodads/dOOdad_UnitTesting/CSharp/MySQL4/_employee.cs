
/*
'===============================================================================
'  Generated From - MySQL4_CSharp_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
' THIS CODE IS NOT OPERATIONAL YET
'===============================================================================
*/

// Generated by MyGeneration Version # (1.1.0.0)

using System;
using System.Data;
using MySql.Data.MySqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace CSharp.MySQL4
{
	public abstract class _employee : MySql4Entity
	{
		public _employee()
		{
			this.QuerySource = "employee";
			this.MappingName = "employee";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			base.FlushData();
		}
		
		public override string GetAutoKeyColumns()
		{
			return "EmployeeID";
		}
		

		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return this.Query.Load();
		}
	
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(uint EmployeeID)
		{
			this.Where.EmployeeID.Value = EmployeeID;
			
			return this.Query.Load();
		}
		
		
		#region Parameters
		protected class Parameters
		{
			
			public static MySqlParameter EmployeeID
			{
				get
				{
					return new MySqlParameter("?EmployeeID", MySqlDbType.Int32);

				}
			}
			
			public static MySqlParameter FirstName
			{
				get
				{
					return new MySqlParameter("?FirstName", MySqlDbType.VarChar);

				}
			}
			
			public static MySqlParameter LastName
			{
				get
				{
					return new MySqlParameter("?LastName", MySqlDbType.VarChar);

				}
			}
			
			public static MySqlParameter TheInt1
			{
				get
				{
					return new MySqlParameter("?TheInt1", MySqlDbType.Int32);

				}
			}
			
			public static MySqlParameter TheInt2
			{
				get
				{
					return new MySqlParameter("?TheInt2", MySqlDbType.Int32);

				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
			public const string EmployeeID = "EmployeeID";
			public const string FirstName = "FirstName";
			public const string LastName = "LastName";
			public const string TheInt1 = "TheInt1";
			public const string TheInt2 = "TheInt2";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[EmployeeID] = _employee.PropertyNames.EmployeeID;
					ht[FirstName] = _employee.PropertyNames.FirstName;
					ht[LastName] = _employee.PropertyNames.LastName;
					ht[TheInt1] = _employee.PropertyNames.TheInt1;
					ht[TheInt2] = _employee.PropertyNames.TheInt2;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
			public const string EmployeeID = "EmployeeID";
			public const string FirstName = "FirstName";
			public const string LastName = "LastName";
			public const string TheInt1 = "TheInt1";
			public const string TheInt2 = "TheInt2";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[EmployeeID] = _employee.ColumnNames.EmployeeID;
					ht[FirstName] = _employee.ColumnNames.FirstName;
					ht[LastName] = _employee.ColumnNames.LastName;
					ht[TheInt1] = _employee.ColumnNames.TheInt1;
					ht[TheInt2] = _employee.ColumnNames.TheInt2;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
			public const string EmployeeID = "s_EmployeeID";
			public const string FirstName = "s_FirstName";
			public const string LastName = "s_LastName";
			public const string TheInt1 = "s_TheInt1";
			public const string TheInt2 = "s_TheInt2";

		}
		#endregion		
		
		#region Properties
	
		public virtual uint EmployeeID
		{
			get
			{
				return base.Getuint(ColumnNames.EmployeeID);
			}
			set
			{
				base.Setuint(ColumnNames.EmployeeID, value);
			}
		}

		public virtual string FirstName
		{
			get
			{
				return base.Getstring(ColumnNames.FirstName);
			}
			set
			{
				base.Setstring(ColumnNames.FirstName, value);
			}
		}

		public virtual string LastName
		{
			get
			{
				return base.Getstring(ColumnNames.LastName);
			}
			set
			{
				base.Setstring(ColumnNames.LastName, value);
			}
		}

		public virtual uint TheInt1
		{
			get
			{
				return base.Getuint(ColumnNames.TheInt1);
			}
			set
			{
				base.Setuint(ColumnNames.TheInt1, value);
			}
		}

		public virtual uint TheInt2
		{
			get
			{
				return base.Getuint(ColumnNames.TheInt2);
			}
			set
			{
				base.Setuint(ColumnNames.TheInt2, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_EmployeeID
		{
			get
			{
				return this.IsColumnNull(ColumnNames.EmployeeID) ? string.Empty : base.GetuintAsString(ColumnNames.EmployeeID);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EmployeeID);
				else
					this.EmployeeID = base.SetuintAsString(ColumnNames.EmployeeID, value);
			}
		}

		public virtual string s_FirstName
		{
			get
			{
				return this.IsColumnNull(ColumnNames.FirstName) ? string.Empty : base.GetstringAsString(ColumnNames.FirstName);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FirstName);
				else
					this.FirstName = base.SetstringAsString(ColumnNames.FirstName, value);
			}
		}

		public virtual string s_LastName
		{
			get
			{
				return this.IsColumnNull(ColumnNames.LastName) ? string.Empty : base.GetstringAsString(ColumnNames.LastName);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastName);
				else
					this.LastName = base.SetstringAsString(ColumnNames.LastName, value);
			}
		}

		public virtual string s_TheInt1
		{
			get
			{
				return this.IsColumnNull(ColumnNames.TheInt1) ? string.Empty : base.GetuintAsString(ColumnNames.TheInt1);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TheInt1);
				else
					this.TheInt1 = base.SetuintAsString(ColumnNames.TheInt1, value);
			}
		}

		public virtual string s_TheInt2
		{
			get
			{
				return this.IsColumnNull(ColumnNames.TheInt2) ? string.Empty : base.GetuintAsString(ColumnNames.TheInt2);
			}
			set
			{
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TheInt2);
				else
					this.TheInt2 = base.SetuintAsString(ColumnNames.TheInt2, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter EmployeeID
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.EmployeeID, Parameters.EmployeeID);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter FirstName
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.FirstName, Parameters.FirstName);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter LastName
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.LastName, Parameters.LastName);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter TheInt1
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.TheInt1, Parameters.TheInt1);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}

				public WhereParameter TheInt2
				{
					get
					{
						WhereParameter where = new WhereParameter(ColumnNames.TheInt2, Parameters.TheInt2);
						this._clause._entity.Query.AddWhereParameter(where);
						return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter EmployeeID
			{
				get
				{
					if(_EmployeeID_W == null)
					{
						_EmployeeID_W = TearOff.EmployeeID;
					}
					return _EmployeeID_W;
				}
			}

			public WhereParameter FirstName
			{
				get
				{
					if(_FirstName_W == null)
					{
						_FirstName_W = TearOff.FirstName;
					}
					return _FirstName_W;
				}
			}

			public WhereParameter LastName
			{
				get
				{
					if(_LastName_W == null)
					{
						_LastName_W = TearOff.LastName;
					}
					return _LastName_W;
				}
			}

			public WhereParameter TheInt1
			{
				get
				{
					if(_TheInt1_W == null)
					{
						_TheInt1_W = TearOff.TheInt1;
					}
					return _TheInt1_W;
				}
			}

			public WhereParameter TheInt2
			{
				get
				{
					if(_TheInt2_W == null)
					{
						_TheInt2_W = TearOff.TheInt2;
					}
					return _TheInt2_W;
				}
			}

			private WhereParameter _EmployeeID_W = null;
			private WhereParameter _FirstName_W = null;
			private WhereParameter _LastName_W = null;
			private WhereParameter _TheInt1_W = null;
			private WhereParameter _TheInt2_W = null;

			public void WhereClauseReset()
			{
				_EmployeeID_W = null;
				_FirstName_W = null;
				_LastName_W = null;
				_TheInt1_W = null;
				_TheInt2_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
		
			
		
		protected override IDbCommand GetInsertCommand()
		{
			MySqlCommand cmd = new MySqlCommand();
			cmd.CommandType = CommandType.Text;
			cmd.CommandText =
				@"INSERT INTO `employee`
			(
				`FirstName`,
				`LastName`,
				`TheInt1`,
				`TheInt2`
			)
			VALUES
			(
				?FirstName,
				?LastName,
				?TheInt1,
				?TheInt2
			)";

			CreateParameters(cmd);
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			MySqlCommand cmd = new MySqlCommand();
			cmd.CommandType = CommandType.Text;
			cmd.CommandText = 
				@"UPDATE `employee` SET 
				`FirstName`=?FirstName,
				`LastName`=?LastName,
				`TheInt1`=?TheInt1,
				`TheInt2`=?TheInt2
			WHERE
				`EmployeeID`=?EmployeeID";

			CreateParameters(cmd);
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			MySqlCommand cmd = new MySqlCommand();
			cmd.CommandType = CommandType.Text;
			cmd.CommandText =
				@"DELETE FROM `employee` 
			WHERE
				`EmployeeID`=?EmployeeID";

	
			MySqlParameter p;
			p = cmd.Parameters.Add(Parameters.EmployeeID);
			p.SourceColumn = ColumnNames.EmployeeID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(MySqlCommand cmd)
		{
			MySqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.EmployeeID);
			p.SourceColumn = ColumnNames.EmployeeID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FirstName);
			p.SourceColumn = ColumnNames.FirstName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastName);
			p.SourceColumn = ColumnNames.LastName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TheInt1);
			p.SourceColumn = ColumnNames.TheInt1;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TheInt2);
			p.SourceColumn = ColumnNames.TheInt2;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}		
		
	
	}
}


