
'===============================================================================
'  Generated From - VbNet_SQL_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  **
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class OracleClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'MustInherit' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can Override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  Public Class YourObject
'    Inherits _YourObject
'
'  End Class
'
'===============================================================================

' Generated by MyGeneration Version # (1.1.3.5)

Imports System
Imports System.Data
Imports System.Data.OracleClient
Imports System.Collections
Imports System.Collections.Specialized

Imports MyGeneration.dOOdads

Namespace MyGeneration.dOOdads.Tests.Oracle

	Public MustInherit Class _AGGREGATETEST
		Inherits OracleClientEntity

		Public Sub New()
			Me.SchemaGlobal = "MYGENERATION."
			Me.QuerySource = "AGGREGATETEST"
			Me.MappingName = "AGGREGATETEST"
		End Sub

		'=================================================================
		'  Public Overrides Sub AddNew()
		'=================================================================
		'
		'=================================================================
		Public Overrides Sub AddNew()
			MyBase.AddNew()

		End Sub

		Public Overrides Sub FlushData()
			Me._whereClause = Nothing
			Me._aggregateClause = Nothing
			MyBase.FlushData()
		End Sub


		'=================================================================
		'  	Public Function LoadAll() As Boolean
		'=================================================================
		'  Loads all of the records in the database, and sets the currentRow to the first row
		'=================================================================
		Public Function LoadAll() As Boolean

			Dim parameters As ListDictionary = Nothing

			parameters = New ListDictionary
			Dim p As OracleParameter = New OracleParameter("outCursor", OracleType.Cursor)
			p.Direction = ParameterDirection.Output
			parameters.Add(p, Nothing)


			Return MyBase.LoadFromSql(Me.SchemaStoredProcedure + "PL_AGGREGATETEST", parameters)

		End Function

		'=================================================================
		' Public Overridable Function LoadByPrimaryKey()  As Boolean
		'=================================================================
		'  Loads a single row of via the primary key
		'=================================================================
		Public Overridable Function LoadByPrimaryKey(ByVal ID As Decimal) As Boolean

			Dim parameters As ListDictionary = New ListDictionary
			parameters.Add(Me.Parameters.ID, ID)


			Dim p As OracleParameter = New OracleParameter("outCursor", OracleType.Cursor)
			p.Direction = ParameterDirection.Output
			parameters.Add(p, Nothing)

			Return MyBase.LoadFromSql(Me.SchemaStoredProcedure + "PK_AGGREGATETEST", parameters)

		End Function

#Region "Parameters"
		Protected Class Parameters

			Public Shared ReadOnly Property ID() As OracleParameter
				Get
					Return New OracleParameter("p_ID", OracleType.Number, 0)
				End Get
			End Property

			Public Shared ReadOnly Property DEPARTMENTID() As OracleParameter
				Get
					Return New OracleParameter("p_DEPARTMENTID", OracleType.Number, 0)
				End Get
			End Property

			Public Shared ReadOnly Property FIRSTNAME() As OracleParameter
				Get
					Return New OracleParameter("p_FIRSTNAME", OracleType.VarChar, 25)
				End Get
			End Property

			Public Shared ReadOnly Property LASTNAME() As OracleParameter
				Get
					Return New OracleParameter("p_LASTNAME", OracleType.VarChar, 15)
				End Get
			End Property

			Public Shared ReadOnly Property AGE() As OracleParameter
				Get
					Return New OracleParameter("p_AGE", OracleType.Number, 0)
				End Get
			End Property

			Public Shared ReadOnly Property HIREDATE() As OracleParameter
				Get
					Return New OracleParameter("p_HIREDATE", OracleType.DateTime, 0)
				End Get
			End Property

			Public Shared ReadOnly Property SALARY() As OracleParameter
				Get
					Return New OracleParameter("p_SALARY", OracleType.Number, 0)
				End Get
			End Property

			Public Shared ReadOnly Property ISACTIVE() As OracleParameter
				Get
					Return New OracleParameter("p_ISACTIVE", OracleType.Number, 0)
				End Get
			End Property

		End Class
#End Region

#Region "ColumnNames"
		Public Class ColumnNames

			Public Const ID As String = "ID"
			Public Const DEPARTMENTID As String = "DEPARTMENTID"
			Public Const FIRSTNAME As String = "FIRSTNAME"
			Public Const LASTNAME As String = "LASTNAME"
			Public Const AGE As String = "AGE"
			Public Const HIREDATE As String = "HIREDATE"
			Public Const SALARY As String = "SALARY"
			Public Const ISACTIVE As String = "ISACTIVE"

			Public Shared Function ToPropertyName(ByVal columnName As String) As String

				If ht Is Nothing Then

					ht = New Hashtable

					ht(ID) = _AGGREGATETEST.PropertyNames.ID
					ht(DEPARTMENTID) = _AGGREGATETEST.PropertyNames.DEPARTMENTID
					ht(FIRSTNAME) = _AGGREGATETEST.PropertyNames.FIRSTNAME
					ht(LASTNAME) = _AGGREGATETEST.PropertyNames.LASTNAME
					ht(AGE) = _AGGREGATETEST.PropertyNames.AGE
					ht(HIREDATE) = _AGGREGATETEST.PropertyNames.HIREDATE
					ht(SALARY) = _AGGREGATETEST.PropertyNames.SALARY
					ht(ISACTIVE) = _AGGREGATETEST.PropertyNames.ISACTIVE

				End If

				Return CType(ht(columnName), String)

			End Function

			Private Shared ht As Hashtable = Nothing
		End Class
#End Region

#Region "PropertyNames"
		Public Class PropertyNames

			Public Const ID As String = "ID"
			Public Const DEPARTMENTID As String = "DEPARTMENTID"
			Public Const FIRSTNAME As String = "FIRSTNAME"
			Public Const LASTNAME As String = "LASTNAME"
			Public Const AGE As String = "AGE"
			Public Const HIREDATE As String = "HIREDATE"
			Public Const SALARY As String = "SALARY"
			Public Const ISACTIVE As String = "ISACTIVE"

			Public Shared Function ToColumnName(ByVal propertyName As String) As String

				If ht Is Nothing Then

					ht = New Hashtable

					ht(ID) = _AGGREGATETEST.ColumnNames.ID
					ht(DEPARTMENTID) = _AGGREGATETEST.ColumnNames.DEPARTMENTID
					ht(FIRSTNAME) = _AGGREGATETEST.ColumnNames.FIRSTNAME
					ht(LASTNAME) = _AGGREGATETEST.ColumnNames.LASTNAME
					ht(AGE) = _AGGREGATETEST.ColumnNames.AGE
					ht(HIREDATE) = _AGGREGATETEST.ColumnNames.HIREDATE
					ht(SALARY) = _AGGREGATETEST.ColumnNames.SALARY
					ht(ISACTIVE) = _AGGREGATETEST.ColumnNames.ISACTIVE

				End If

				Return CType(ht(propertyName), String)

			End Function

			Private Shared ht As Hashtable = Nothing

		End Class
#End Region

#Region "StringPropertyNames"
		Public Class StringPropertyNames

			Public Const ID As String = "s_ID"
			Public Const DEPARTMENTID As String = "s_DEPARTMENTID"
			Public Const FIRSTNAME As String = "s_FIRSTNAME"
			Public Const LASTNAME As String = "s_LASTNAME"
			Public Const AGE As String = "s_AGE"
			Public Const HIREDATE As String = "s_HIREDATE"
			Public Const SALARY As String = "s_SALARY"
			Public Const ISACTIVE As String = "s_ISACTIVE"

		End Class
#End Region

#Region "Properties"
		Public Overridable Property ID() As Decimal
			Get
				Return MyBase.GetDecimal(ColumnNames.ID)
			End Get
			Set(ByVal Value As Decimal)
				MyBase.SetDecimal(ColumnNames.ID, Value)
			End Set
		End Property

		Public Overridable Property DEPARTMENTID() As Decimal
			Get
				Return MyBase.GetDecimal(ColumnNames.DEPARTMENTID)
			End Get
			Set(ByVal Value As Decimal)
				MyBase.SetDecimal(ColumnNames.DEPARTMENTID, Value)
			End Set
		End Property

		Public Overridable Property FIRSTNAME() As String
			Get
				Return MyBase.GetString(ColumnNames.FIRSTNAME)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.FIRSTNAME, Value)
			End Set
		End Property

		Public Overridable Property LASTNAME() As String
			Get
				Return MyBase.GetString(ColumnNames.LASTNAME)
			End Get
			Set(ByVal Value As String)
				MyBase.SetString(ColumnNames.LASTNAME, Value)
			End Set
		End Property

		Public Overridable Property AGE() As Decimal
			Get
				Return MyBase.GetDecimal(ColumnNames.AGE)
			End Get
			Set(ByVal Value As Decimal)
				MyBase.SetDecimal(ColumnNames.AGE, Value)
			End Set
		End Property

		Public Overridable Property HIREDATE() As DateTime
			Get
				Return MyBase.GetDateTime(ColumnNames.HIREDATE)
			End Get
			Set(ByVal Value As DateTime)
				MyBase.SetDateTime(ColumnNames.HIREDATE, Value)
			End Set
		End Property

		Public Overridable Property SALARY() As Decimal
			Get
				Return MyBase.GetDecimal(ColumnNames.SALARY)
			End Get
			Set(ByVal Value As Decimal)
				MyBase.SetDecimal(ColumnNames.SALARY, Value)
			End Set
		End Property

		Public Overridable Property ISACTIVE() As Decimal
			Get
				Return MyBase.GetDecimal(ColumnNames.ISACTIVE)
			End Get
			Set(ByVal Value As Decimal)
				MyBase.SetDecimal(ColumnNames.ISACTIVE, Value)
			End Set
		End Property


#End Region

#Region "String Properties"

		Public Overridable Property s_ID() As String
			Get
				If Me.IsColumnNull(ColumnNames.ID) Then
					Return String.Empty
				Else
					Return MyBase.GetDecimalAsString(ColumnNames.ID)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.ID)
				Else
					Me.ID = MyBase.SetDecimalAsString(ColumnNames.ID, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_DEPARTMENTID() As String
			Get
				If Me.IsColumnNull(ColumnNames.DEPARTMENTID) Then
					Return String.Empty
				Else
					Return MyBase.GetDecimalAsString(ColumnNames.DEPARTMENTID)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.DEPARTMENTID)
				Else
					Me.DEPARTMENTID = MyBase.SetDecimalAsString(ColumnNames.DEPARTMENTID, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_FIRSTNAME() As String
			Get
				If Me.IsColumnNull(ColumnNames.FIRSTNAME) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.FIRSTNAME)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.FIRSTNAME)
				Else
					Me.FIRSTNAME = MyBase.SetStringAsString(ColumnNames.FIRSTNAME, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_LASTNAME() As String
			Get
				If Me.IsColumnNull(ColumnNames.LASTNAME) Then
					Return String.Empty
				Else
					Return MyBase.GetStringAsString(ColumnNames.LASTNAME)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.LASTNAME)
				Else
					Me.LASTNAME = MyBase.SetStringAsString(ColumnNames.LASTNAME, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_AGE() As String
			Get
				If Me.IsColumnNull(ColumnNames.AGE) Then
					Return String.Empty
				Else
					Return MyBase.GetDecimalAsString(ColumnNames.AGE)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.AGE)
				Else
					Me.AGE = MyBase.SetDecimalAsString(ColumnNames.AGE, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_HIREDATE() As String
			Get
				If Me.IsColumnNull(ColumnNames.HIREDATE) Then
					Return String.Empty
				Else
					Return MyBase.GetDateTimeAsString(ColumnNames.HIREDATE)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.HIREDATE)
				Else
					Me.HIREDATE = MyBase.SetDateTimeAsString(ColumnNames.HIREDATE, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_SALARY() As String
			Get
				If Me.IsColumnNull(ColumnNames.SALARY) Then
					Return String.Empty
				Else
					Return MyBase.GetDecimalAsString(ColumnNames.SALARY)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.SALARY)
				Else
					Me.SALARY = MyBase.SetDecimalAsString(ColumnNames.SALARY, Value)
				End If
			End Set
		End Property

		Public Overridable Property s_ISACTIVE() As String
			Get
				If Me.IsColumnNull(ColumnNames.ISACTIVE) Then
					Return String.Empty
				Else
					Return MyBase.GetDecimalAsString(ColumnNames.ISACTIVE)
				End If
			End Get
			Set(ByVal Value As String)
				If String.Empty = value Then
					Me.SetColumnNull(ColumnNames.ISACTIVE)
				Else
					Me.ISACTIVE = MyBase.SetDecimalAsString(ColumnNames.ISACTIVE, Value)
				End If
			End Set
		End Property


#End Region

#Region "Where Clause"
		Public Class WhereClause

			Public Sub New(ByVal entity As BusinessEntity)
				Me._entity = entity
			End Sub

			Public ReadOnly Property TearOff() As TearOffWhereParameter
				Get
					If _tearOff Is Nothing Then
						_tearOff = New TearOffWhereParameter(Me)
					End If

					Return _tearOff
				End Get
			End Property

#Region "TearOff's"
			Public Class TearOffWhereParameter

				Public Sub New(ByVal clause As WhereClause)
					Me._clause = clause
				End Sub


				Public ReadOnly Property ID() As WhereParameter
					Get
						Dim where As WhereParameter = New WhereParameter(ColumnNames.ID, Parameters.ID)
						Me._clause._entity.Query.AddWhereParemeter(where)
						Return where
					End Get
				End Property

				Public ReadOnly Property DEPARTMENTID() As WhereParameter
					Get
						Dim where As WhereParameter = New WhereParameter(ColumnNames.DEPARTMENTID, Parameters.DEPARTMENTID)
						Me._clause._entity.Query.AddWhereParemeter(where)
						Return where
					End Get
				End Property

				Public ReadOnly Property FIRSTNAME() As WhereParameter
					Get
						Dim where As WhereParameter = New WhereParameter(ColumnNames.FIRSTNAME, Parameters.FIRSTNAME)
						Me._clause._entity.Query.AddWhereParemeter(where)
						Return where
					End Get
				End Property

				Public ReadOnly Property LASTNAME() As WhereParameter
					Get
						Dim where As WhereParameter = New WhereParameter(ColumnNames.LASTNAME, Parameters.LASTNAME)
						Me._clause._entity.Query.AddWhereParemeter(where)
						Return where
					End Get
				End Property

				Public ReadOnly Property AGE() As WhereParameter
					Get
						Dim where As WhereParameter = New WhereParameter(ColumnNames.AGE, Parameters.AGE)
						Me._clause._entity.Query.AddWhereParemeter(where)
						Return where
					End Get
				End Property

				Public ReadOnly Property HIREDATE() As WhereParameter
					Get
						Dim where As WhereParameter = New WhereParameter(ColumnNames.HIREDATE, Parameters.HIREDATE)
						Me._clause._entity.Query.AddWhereParemeter(where)
						Return where
					End Get
				End Property

				Public ReadOnly Property SALARY() As WhereParameter
					Get
						Dim where As WhereParameter = New WhereParameter(ColumnNames.SALARY, Parameters.SALARY)
						Me._clause._entity.Query.AddWhereParemeter(where)
						Return where
					End Get
				End Property

				Public ReadOnly Property ISACTIVE() As WhereParameter
					Get
						Dim where As WhereParameter = New WhereParameter(ColumnNames.ISACTIVE, Parameters.ISACTIVE)
						Me._clause._entity.Query.AddWhereParemeter(where)
						Return where
					End Get
				End Property


				Private _clause As WhereClause
			End Class
#End Region

			Public ReadOnly Property ID() As WhereParameter
				Get
					If _ID_W Is Nothing Then
						_ID_W = TearOff.ID
					End If
					Return _ID_W
				End Get
			End Property

			Public ReadOnly Property DEPARTMENTID() As WhereParameter
				Get
					If _DEPARTMENTID_W Is Nothing Then
						_DEPARTMENTID_W = TearOff.DEPARTMENTID
					End If
					Return _DEPARTMENTID_W
				End Get
			End Property

			Public ReadOnly Property FIRSTNAME() As WhereParameter
				Get
					If _FIRSTNAME_W Is Nothing Then
						_FIRSTNAME_W = TearOff.FIRSTNAME
					End If
					Return _FIRSTNAME_W
				End Get
			End Property

			Public ReadOnly Property LASTNAME() As WhereParameter
				Get
					If _LASTNAME_W Is Nothing Then
						_LASTNAME_W = TearOff.LASTNAME
					End If
					Return _LASTNAME_W
				End Get
			End Property

			Public ReadOnly Property AGE() As WhereParameter
				Get
					If _AGE_W Is Nothing Then
						_AGE_W = TearOff.AGE
					End If
					Return _AGE_W
				End Get
			End Property

			Public ReadOnly Property HIREDATE() As WhereParameter
				Get
					If _HIREDATE_W Is Nothing Then
						_HIREDATE_W = TearOff.HIREDATE
					End If
					Return _HIREDATE_W
				End Get
			End Property

			Public ReadOnly Property SALARY() As WhereParameter
				Get
					If _SALARY_W Is Nothing Then
						_SALARY_W = TearOff.SALARY
					End If
					Return _SALARY_W
				End Get
			End Property

			Public ReadOnly Property ISACTIVE() As WhereParameter
				Get
					If _ISACTIVE_W Is Nothing Then
						_ISACTIVE_W = TearOff.ISACTIVE
					End If
					Return _ISACTIVE_W
				End Get
			End Property

			Private _ID_W As WhereParameter = Nothing
			Private _DEPARTMENTID_W As WhereParameter = Nothing
			Private _FIRSTNAME_W As WhereParameter = Nothing
			Private _LASTNAME_W As WhereParameter = Nothing
			Private _AGE_W As WhereParameter = Nothing
			Private _HIREDATE_W As WhereParameter = Nothing
			Private _SALARY_W As WhereParameter = Nothing
			Private _ISACTIVE_W As WhereParameter = Nothing

			Public Sub WhereClauseReset()

				_ID_W = Nothing
				_DEPARTMENTID_W = Nothing
				_FIRSTNAME_W = Nothing
				_LASTNAME_W = Nothing
				_AGE_W = Nothing
				_HIREDATE_W = Nothing
				_SALARY_W = Nothing
				_ISACTIVE_W = Nothing
				Me._entity.Query.FlushWhereParameters()

			End Sub

			Private _entity As BusinessEntity
			Private _tearOff As TearOffWhereParameter
		End Class

		Public ReadOnly Property Where() As WhereClause
			Get
				If _whereClause Is Nothing Then
					_whereClause = New WhereClause(Me)
				End If

				Return _whereClause
			End Get
		End Property

		Private _whereClause As WhereClause = Nothing
#End Region

#Region "Aggregate Clause"
		Public Class AggregateClause

			Public Sub New(ByVal entity As BusinessEntity)
				Me._entity = entity
			End Sub

			Public ReadOnly Property TearOff() As TearOffAggregateParameter
				Get
					If _tearOff Is Nothing Then
						_tearOff = New TearOffAggregateParameter(Me)
					End If

					Return _tearOff
				End Get
			End Property

#Region "AggregateParameter TearOff's"
			Public Class TearOffAggregateParameter

				Public Sub New(ByVal clause As AggregateClause)
					Me._clause = clause
				End Sub


				Public ReadOnly Property ID() As AggregateParameter
					Get
						Dim where As AggregateParameter = New AggregateParameter(ColumnNames.ID, Parameters.ID)
						Me._clause._entity.Query.AddAggregateParameter(where)
						Return where
					End Get
				End Property

				Public ReadOnly Property DEPARTMENTID() As AggregateParameter
					Get
						Dim where As AggregateParameter = New AggregateParameter(ColumnNames.DEPARTMENTID, Parameters.DEPARTMENTID)
						Me._clause._entity.Query.AddAggregateParameter(where)
						Return where
					End Get
				End Property

				Public ReadOnly Property FIRSTNAME() As AggregateParameter
					Get
						Dim where As AggregateParameter = New AggregateParameter(ColumnNames.FIRSTNAME, Parameters.FIRSTNAME)
						Me._clause._entity.Query.AddAggregateParameter(where)
						Return where
					End Get
				End Property

				Public ReadOnly Property LASTNAME() As AggregateParameter
					Get
						Dim where As AggregateParameter = New AggregateParameter(ColumnNames.LASTNAME, Parameters.LASTNAME)
						Me._clause._entity.Query.AddAggregateParameter(where)
						Return where
					End Get
				End Property

				Public ReadOnly Property AGE() As AggregateParameter
					Get
						Dim where As AggregateParameter = New AggregateParameter(ColumnNames.AGE, Parameters.AGE)
						Me._clause._entity.Query.AddAggregateParameter(where)
						Return where
					End Get
				End Property

				Public ReadOnly Property HIREDATE() As AggregateParameter
					Get
						Dim where As AggregateParameter = New AggregateParameter(ColumnNames.HIREDATE, Parameters.HIREDATE)
						Me._clause._entity.Query.AddAggregateParameter(where)
						Return where
					End Get
				End Property

				Public ReadOnly Property SALARY() As AggregateParameter
					Get
						Dim where As AggregateParameter = New AggregateParameter(ColumnNames.SALARY, Parameters.SALARY)
						Me._clause._entity.Query.AddAggregateParameter(where)
						Return where
					End Get
				End Property

				Public ReadOnly Property ISACTIVE() As AggregateParameter
					Get
						Dim where As AggregateParameter = New AggregateParameter(ColumnNames.ISACTIVE, Parameters.ISACTIVE)
						Me._clause._entity.Query.AddAggregateParameter(where)
						Return where
					End Get
				End Property


				Private _clause As AggregateClause
			End Class
#End Region

			Public ReadOnly Property ID() As AggregateParameter
				Get
					If _ID_W Is Nothing Then
						_ID_W = TearOff.ID
					End If
					Return _ID_W
				End Get
			End Property

			Public ReadOnly Property DEPARTMENTID() As AggregateParameter
				Get
					If _DEPARTMENTID_W Is Nothing Then
						_DEPARTMENTID_W = TearOff.DEPARTMENTID
					End If
					Return _DEPARTMENTID_W
				End Get
			End Property

			Public ReadOnly Property FIRSTNAME() As AggregateParameter
				Get
					If _FIRSTNAME_W Is Nothing Then
						_FIRSTNAME_W = TearOff.FIRSTNAME
					End If
					Return _FIRSTNAME_W
				End Get
			End Property

			Public ReadOnly Property LASTNAME() As AggregateParameter
				Get
					If _LASTNAME_W Is Nothing Then
						_LASTNAME_W = TearOff.LASTNAME
					End If
					Return _LASTNAME_W
				End Get
			End Property

			Public ReadOnly Property AGE() As AggregateParameter
				Get
					If _AGE_W Is Nothing Then
						_AGE_W = TearOff.AGE
					End If
					Return _AGE_W
				End Get
			End Property

			Public ReadOnly Property HIREDATE() As AggregateParameter
				Get
					If _HIREDATE_W Is Nothing Then
						_HIREDATE_W = TearOff.HIREDATE
					End If
					Return _HIREDATE_W
				End Get
			End Property

			Public ReadOnly Property SALARY() As AggregateParameter
				Get
					If _SALARY_W Is Nothing Then
						_SALARY_W = TearOff.SALARY
					End If
					Return _SALARY_W
				End Get
			End Property

			Public ReadOnly Property ISACTIVE() As AggregateParameter
				Get
					If _ISACTIVE_W Is Nothing Then
						_ISACTIVE_W = TearOff.ISACTIVE
					End If
					Return _ISACTIVE_W
				End Get
			End Property

			Private _ID_W As AggregateParameter = Nothing
			Private _DEPARTMENTID_W As AggregateParameter = Nothing
			Private _FIRSTNAME_W As AggregateParameter = Nothing
			Private _LASTNAME_W As AggregateParameter = Nothing
			Private _AGE_W As AggregateParameter = Nothing
			Private _HIREDATE_W As AggregateParameter = Nothing
			Private _SALARY_W As AggregateParameter = Nothing
			Private _ISACTIVE_W As AggregateParameter = Nothing

			Public Sub AggregateClauseReset()

				_ID_W = Nothing
				_DEPARTMENTID_W = Nothing
				_FIRSTNAME_W = Nothing
				_LASTNAME_W = Nothing
				_AGE_W = Nothing
				_HIREDATE_W = Nothing
				_SALARY_W = Nothing
				_ISACTIVE_W = Nothing
				Me._entity.Query.FlushAggregateParameters()

			End Sub

			Private _entity As BusinessEntity
			Private _tearOff As TearOffAggregateParameter
		End Class

		Public ReadOnly Property Aggregate() As AggregateClause
			Get
				If _aggregateClause Is Nothing Then
					_aggregateClause = New AggregateClause(Me)
				End If

				Return _aggregateClause
			End Get
		End Property

		Private _aggregateClause As AggregateClause = Nothing
#End Region

		Protected Overrides Function GetInsertCommand() As IDbCommand

			Dim cmd As OracleCommand = New OracleCommand
			cmd.CommandType = CommandType.StoredProcedure
			cmd.CommandText = Me.SchemaStoredProcedure + "PI_AGGREGATETEST"

			CreateParameters(cmd)

			Dim p As OracleParameter
			p = cmd.Parameters(Parameters.ID.ParameterName)
			p.Direction = ParameterDirection.Output

			Return cmd

		End Function

		Protected Overrides Function GetUpdateCommand() As IDbCommand

			Dim cmd As OracleCommand = New OracleCommand
			cmd.CommandType = CommandType.StoredProcedure
			cmd.CommandText = Me.SchemaStoredProcedure + "PU_AGGREGATETEST"

			CreateParameters(cmd)

			Return cmd

		End Function

		Protected Overrides Function GetDeleteCommand() As IDbCommand

			Dim cmd As OracleCommand = New OracleCommand
			cmd.CommandType = CommandType.StoredProcedure
			cmd.CommandText = Me.SchemaStoredProcedure + "PD_AGGREGATETEST"

			Dim p As OracleParameter
			p = cmd.Parameters.Add(Parameters.ID)
			p.SourceColumn = ColumnNames.ID
			p.SourceVersion = DataRowVersion.Current


			Return cmd

		End Function

		Private Sub CreateParameters(ByVal cmd As OracleCommand)

			Dim p As OracleParameter
			p = cmd.Parameters.Add(Parameters.ID)
			p.SourceColumn = ColumnNames.ID
			p.SourceVersion = DataRowVersion.Current

			p = cmd.Parameters.Add(Parameters.DEPARTMENTID)
			p.SourceColumn = ColumnNames.DEPARTMENTID
			p.SourceVersion = DataRowVersion.Current

			p = cmd.Parameters.Add(Parameters.FIRSTNAME)
			p.SourceColumn = ColumnNames.FIRSTNAME
			p.SourceVersion = DataRowVersion.Current

			p = cmd.Parameters.Add(Parameters.LASTNAME)
			p.SourceColumn = ColumnNames.LASTNAME
			p.SourceVersion = DataRowVersion.Current

			p = cmd.Parameters.Add(Parameters.AGE)
			p.SourceColumn = ColumnNames.AGE
			p.SourceVersion = DataRowVersion.Current

			p = cmd.Parameters.Add(Parameters.HIREDATE)
			p.SourceColumn = ColumnNames.HIREDATE
			p.SourceVersion = DataRowVersion.Current

			p = cmd.Parameters.Add(Parameters.SALARY)
			p.SourceColumn = ColumnNames.SALARY
			p.SourceVersion = DataRowVersion.Current

			p = cmd.Parameters.Add(Parameters.ISACTIVE)
			p.SourceColumn = ColumnNames.ISACTIVE
			p.SourceVersion = DataRowVersion.Current


		End Sub

	End Class

End Namespace



